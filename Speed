local ElixirLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/Aspherian-EC/ui-teste-/refs/heads/main/ElixirLib.lua"))()
local Window = ElixirLib:MakeWindow({ Name = "Elixir Client Legends of Speed" })


local FarmTab = Window:MakeTab({
    Name = "Farming",
    Icon = "rbxassetid://YOUR_ICON_ID"
})



local Section = FarmTab:AddSection({
    Name = "Farm"
})

getgenv().FarmActive = false
getgenv().OrbType = "Red Orb"
getgenv().GroupDelay = 0.1       -- Delay between groups of shots (seconds)
getgenv().ShotsPerGroup = 1      -- Number of shots per group

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local orbEvent = ReplicatedStorage.rEvents.orbEvent

FarmTab:AddToggle({
    Name = "Enable Farm",
    Default = false,
    Callback = function(Value)
        getgenv().FarmActive = Value
        print("Farm enabled:", Value)

        if Value then
            spawn(function()
                while getgenv().FarmActive do
                    for i = 1, getgenv().ShotsPerGroup do
                        orbEvent:FireServer("collectOrb", getgenv().OrbType, "City")
                    end
                    wait(getgenv().GroupDelay)
                end
            end)
        end
    end
})

FarmTab:AddDropdown({
    Name = "Orb Type",
    Default = "Red Orb",
    Options = {"Red Orb", "Gem"},
    Callback = function(Value)
        getgenv().OrbType = Value
        print("Selected Orb Type:", Value)
    end
})

FarmTab:AddSlider({
    Name = "Delay Farm",
    Min = 0,
    Max = 0.5,
    Default = 0.1,
    Color = Color3.fromRGB(255, 0, 0),
    Increment = 0.01,
    ValueName = "Delay",
    Callback = function(value)
        getgenv().GroupDelay = value
        print("Group delay set to:", value)
    end
})

FarmTab:AddSlider({
    Name = "Farm Multiplier",
    Min = 1,
    Max = 999,
    Default = 1,
    Color = Color3.fromRGB(0, 255, 0),
    Increment = 1,
    ValueName = "Quantity",
    Callback = function(value)
        getgenv().ShotsPerGroup = value
        print("Shots per group set to:", value)
    end
})

local Section = FarmTab:AddSection({
    Name = "Reborn"
})

getgenv().AutoRebirthAtivo = false

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local rebirthEvent = ReplicatedStorage.rEvents.rebirthEvent

FarmTab:AddToggle({
    Name = "Auto Rebirth",
    Default = false,
    Callback = function(Value)
        getgenv().AutoRebirthAtivo = Value
        print("Auto Rebirth:", Value and "Ligado" or "Desligado")

        if Value then
            spawn(function()
                while getgenv().AutoRebirthAtivo do
                    rebirthEvent:FireServer("rebirthRequest")
                    wait(1) -- delay pra não floodar muito o servidor, pode ajustar conforme necessário
                end
            end)
        end
    end
})



--[[local Section = FarmTab:AddSection({
    Name = "Auto Join Race"
})
]]

local ShopTab = Window:MakeTab({
    Name = "Shop",
    Icon = "rbxassetid://YOUR_ICON_ID"
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local openCrystalRemote = ReplicatedStorage.rEvents.openCrystalRemote

-- RED CRYSTAL
ShopTab:AddButton({
    Name = "Buy Red Crystal",
    Callback = function()
        local success, err = pcall(function()
            openCrystalRemote:InvokeServer("openCrystal", "Red Crystal")
        end)
        if success then
            print("Bought Red Crystal")
        else
            warn("Failed to buy Red Crystal:", err)
        end
    end
})

getgenv().AutoBuyRedCrystal = false
ShopTab:AddToggle({
    Name = "Auto Buy Red Crystal",
    Default = false,
    Callback = function(value)
        getgenv().AutoBuyRedCrystal = value
        print((value and "Enabled" or "Disabled") .. " Auto Buy Red Crystal")

        if value then
            spawn(function()
                while getgenv().AutoBuyRedCrystal do
                    local success, err = pcall(function()
                        openCrystalRemote:InvokeServer("openCrystal", "Red Crystal")
                    end)
                    if success then
                        print("Auto bought Red Crystal")
                    else
                        warn("Auto buy Red Crystal failed:", err)
                    end
                    wait(0.5)
                end
            end)
        end
    end
})

-- SNOW CRYSTAL
ShopTab:AddButton({
    Name = "Buy Snow Crystal",
    Callback = function()
        local success, err = pcall(function()
            openCrystalRemote:InvokeServer("openCrystal", "Snow Crystal")
        end)
        if success then
            print("Bought Snow Crystal")
        else
            warn("Failed to buy Snow Crystal:", err)
        end
    end
})

getgenv().AutoBuySnowCrystal = false
ShopTab:AddToggle({
    Name = "Auto Buy Snow Crystal",
    Default = false,
    Callback = function(value)
        getgenv().AutoBuySnowCrystal = value
        print((value and "Enabled" or "Disabled") .. " Auto Buy Snow Crystal")

        if value then
            spawn(function()
                while getgenv().AutoBuySnowCrystal do
                    local success, err = pcall(function()
                        openCrystalRemote:InvokeServer("openCrystal", "Snow Crystal")
                    end)
                    if success then
                        print("Auto bought Snow Crystal")
                    else
                        warn("Auto buy Snow Crystal failed:", err)
                    end
                    wait(0.5)
                end
            end)
        end
    end
})

-- LAVA CRYSTAL
ShopTab:AddButton({
    Name = "Buy Lava Crystal",
    Callback = function()
        local success, err = pcall(function()
            openCrystalRemote:InvokeServer("openCrystal", "Lava Crystal")
        end)
        if success then
            print("Bought Lava Crystal")
        else
            warn("Failed to buy Lava Crystal:", err)
        end
    end
})

getgenv().AutoBuyLavaCrystal = false
ShopTab:AddToggle({
    Name = "Auto Buy Lava Crystal",
    Default = false,
    Callback = function(value)
        getgenv().AutoBuyLavaCrystal = value
        print((value and "Enabled" or "Disabled") .. " Auto Buy Lava Crystal")

        if value then
            spawn(function()
                while getgenv().AutoBuyLavaCrystal do
                    local success, err = pcall(function()
                        openCrystalRemote:InvokeServer("openCrystal", "Lava Crystal")
                    end)
                    if success then
                        print("Auto bought Lava Crystal")
                    else
                        warn("Auto buy Lava Crystal failed:", err)
                    end
                    wait(0.5)
                end
            end)
        end
    end
})

-- ELECTRO LEGENDS CRYSTAL
ShopTab:AddButton({
    Name = "Buy Electro Legends Crystal",
    Callback = function()
        local success, err = pcall(function()
            openCrystalRemote:InvokeServer("openCrystal", "Electro Legends Crystal")
        end)
        if success then
            print("Bought Electro Legends Crystal")
        else
            warn("Failed to buy Electro Legends Crystal:", err)
        end
    end
})

getgenv().AutoBuyElectroLegendsCrystal = false
ShopTab:AddToggle({
    Name = "Auto Buy Electro Legends Crystal",
    Default = false,
    Callback = function(value)
        getgenv().AutoBuyElectroLegendsCrystal = value
        print((value and "Enabled" or "Disabled") .. " Auto Buy Electro Legends Crystal")

        if value then
            spawn(function()
                while getgenv().AutoBuyElectroLegendsCrystal do
                    local success, err = pcall(function()
                        openCrystalRemote:InvokeServer("openCrystal", "Electro Legends Crystal")
                    end)
                    if success then
                        print("Auto bought Electro Legends Crystal")
                    else
                        warn("Auto buy Electro Legends Crystal failed:", err)
                    end
                    wait(0.5)
                end
            end)
        end
    end
})



local SellTab = Window:MakeTab({
    Name = "Auto Sell",
    Icon = "rbxassetid://YOUR_ICON_ID"
})

local Section = SellTab:AddSection({
    Name = "Sell Pets"
})

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local sellPetEvent = ReplicatedStorage.rEvents.sellPetEvent

-- Variáveis globais para controlar os toggles
getgenv().AutoSellBasic = false
getgenv().AutoSellAdvanced = false
getgenv().AutoSellEpic = false
getgenv().AutoSellOmega = false
getgenv().AutoSellRare = false
getgenv().AutoSellUnique = false

-- Função que vende todos os pets na pasta de uma raridade
local function sellPetsInRarity(rarity)
    local petsFolder = localPlayer:FindFirstChild("petsFolder")
    if not petsFolder then
        warn("petsFolder not found on player")
        return
    end

    local rarityFolder = petsFolder:FindFirstChild(rarity)
    if not rarityFolder then
        warn(rarity .. " folder not found")
        return
    end

    for _, pet in pairs(rarityFolder:GetChildren()) do
        local success, err = pcall(function()
            sellPetEvent:FireServer("sellPet", pet)
        end)
        if success then
            print("Sold pet:", pet.Name, "from", rarity)
        else
            warn("Failed to sell pet:", pet.Name, err)
        end
    end
end

-- Função que fica rodando as vendas automáticas conforme os toggles
spawn(function()
    while true do
        if getgenv().AutoSellBasic then
            sellPetsInRarity("Basic")
        end
        if getgenv().AutoSellAdvanced then
            sellPetsInRarity("Advanced")
        end
        if getgenv().AutoSellEpic then
            sellPetsInRarity("Epic")
        end
        if getgenv().AutoSellOmega then
            sellPetsInRarity("Omega")
        end
        if getgenv().AutoSellRare then
            sellPetsInRarity("Rare")
        end
        if getgenv().AutoSellUnique then
            sellPetsInRarity("Unique")
        end

        wait(0.5)
    end
end)

-- Agora adiciona os toggles explicitamente

SellTab:AddToggle({
    Name = "Auto Sell Basic Pets",
    Default = false,
    Callback = function(Value)
        getgenv().AutoSellBasic = Value
        print("Auto Sell Basic Pets:", Value and "On" or "Off")
    end
})

SellTab:AddToggle({
    Name = "Auto Sell Advanced Pets",
    Default = false,
    Callback = function(Value)
        getgenv().AutoSellAdvanced = Value
        print("Auto Sell Advanced Pets:", Value and "On" or "Off")
    end
})


SellTab:AddToggle({
    Name = "Auto Sell Rare Pets",
    Default = false,
    Callback = function(Value)
        getgenv().AutoSellRare = Value
        print("Auto Sell Rare Pets:", Value and "On" or "Off")
    end
})


SellTab:AddToggle({
    Name = "Auto Sell Epic Pets",
    Default = false,
    Callback = function(Value)
        getgenv().AutoSellEpic = Value
        print("Auto Sell Epic Pets:", Value and "On" or "Off")
    end
})

SellTab:AddToggle({
    Name = "Auto Sell Omega Pets",
    Default = false,
    Callback = function(Value)
        getgenv().AutoSellOmega = Value
        print("Auto Sell Omega Pets:", Value and "On" or "Off")
    end
})



SellTab:AddToggle({
    Name = "Auto Sell Unique Pets",
    Default = false,
    Callback = function(Value)
        getgenv().AutoSellUnique = Value
        print("Auto Sell Unique Pets:", Value and "On" or "Off")
    end
})

local Section = SellTab:AddSection({
    Name = "Sell Trail"
})


local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local sellTrailEvent = ReplicatedStorage.rEvents.sellTrailEvent

local trailRarities = {
    "Advanced",
    "Basic",
    "Epic",
    "Rare",
    "Unique"
}

-- Variáveis globais para toggles
getgenv().AutoSellTrailBasic = false
getgenv().AutoSellTrailAdvanced = false
getgenv().AutoSellTrailEpic = false
getgenv().AutoSellTrailRare = false
getgenv().AutoSellTrailUnique = false

-- Função para vender todos trails da raridade
local function sellTrailsInRarity(rarity)
    local trailsFolder = localPlayer:FindFirstChild("trailsFolder")
    if not trailsFolder then
        warn("trailsFolder not found on player")
        return
    end

    local rarityFolder = trailsFolder:FindFirstChild(rarity)
    if not rarityFolder then
        warn(rarity .. " folder not found")
        return
    end

    for _, trail in pairs(rarityFolder:GetChildren()) do
        local success, err = pcall(function()
            sellTrailEvent:FireServer("sellTrail", trail)
        end)
        if success then
            print("Sold trail:", trail.Name, "from", rarity)
        else
            warn("Failed to sell trail:", trail.Name, err)
        end
    end
end

-- Loop que monitora toggles e vende os trails conforme ativação
spawn(function()
    while true do
        if getgenv().AutoSellTrailBasic then
            sellTrailsInRarity("Basic")
        end
        if getgenv().AutoSellTrailAdvanced then
            sellTrailsInRarity("Advanced")
        end
        if getgenv().AutoSellTrailEpic then
            sellTrailsInRarity("Epic")
        end
        if getgenv().AutoSellTrailRare then
            sellTrailsInRarity("Rare")
        end
        if getgenv().AutoSellTrailUnique then
            sellTrailsInRarity("Unique")
        end
        wait(0.5)
    end
end)

-- Adiciona toggles no SellTab para cada raridade

SellTab:AddToggle({
    Name = "Auto Sell Basic Trails",
    Default = false,
    Callback = function(value)
        getgenv().AutoSellTrailBasic = value
        print("Auto Sell Basic Trails:", value and "On" or "Off")
    end
})

SellTab:AddToggle({
    Name = "Auto Sell Advanced Trails",
    Default = false,
    Callback = function(value)
        getgenv().AutoSellTrailAdvanced = value
        print("Auto Sell Advanced Trails:", value and "On" or "Off")
    end
})

SellTab:AddToggle({
    Name = "Auto Sell Rare Trails",
    Default = false,
    Callback = function(value)
        getgenv().AutoSellTrailRare = value
        print("Auto Sell Rare Trails:", value and "On" or "Off")
    end
})

SellTab:AddToggle({
    Name = "Auto Sell Epic Trails",
    Default = false,
    Callback = function(value)
        getgenv().AutoSellTrailEpic = value
        print("Auto Sell Epic Trails:", value and "On" or "Off")
    end
})



SellTab:AddToggle({
    Name = "Auto Sell Unique Trails",
    Default = false,
    Callback = function(value)
        getgenv().AutoSellTrailUnique = value
        print("Auto Sell Unique Trails:", value and "On" or "Off")
    end
})



local QuestTab = Window:MakeTab({
    Name = "Misc",
    Icon = "rbxassetid://76275369017446"
})


--🟠🟠🟠🟠🟠🟠🟠

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local autoClaimEnabled = false

QuestTab:AddToggle({
    Name = "Auto Claim Gift",
    Default = false,
    Callback = function(value)
        autoClaimEnabled = value
        print("Auto Claim Gift:", value)
    end
})

local claimRemote

local function getClaimRemote()
    if not claimRemote or not claimRemote:IsDescendantOf(game) then
        claimRemote = ReplicatedStorage:FindFirstChild("rEvents") and ReplicatedStorage.rEvents:FindFirstChild("freeGiftClaimRemote")
    end
    return claimRemote
end

-- Loop para checar e resgatar todos os gifts de 1 a 8
task.spawn(function()
    while true do
        task.wait(1) -- 1 segundo para evitar flood

        if autoClaimEnabled then
            local remote = getClaimRemote()
            if remote then
                for i = 1, 8 do
                    pcall(function()
                        remote:InvokeServer("claimGift", i)
                    end)
                end
            else
                warn("[AutoClaim] Remote 'rEvents.freeGiftClaimRemote' não encontrado.")
            end
        end
    end
end)

--🟠🟠🟠🟠🟠

local Section = QuestTab:AddSection({
    Name = "Quests"
})

-- Variáveis de controle
local autoCollectDaily = false
local autoCollectWeekly = false

-- Serviços e jogador
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local rEvents = ReplicatedStorage:WaitForChild("rEvents")
local questsEvent = rEvents:WaitForChild("questsEvent")

-- Função para coletar Daily Quests
local function collectAllDailyQuests()
    local success, err = pcall(function()
        local dailyQuestsFolder = LocalPlayer:WaitForChild("Quests"):WaitForChild("Daily Quests")
        
        for _, quest in pairs(dailyQuestsFolder:GetChildren()) do
            if quest:IsA("Folder") or quest:IsA("Instance") then
                questsEvent:FireServer("collectQuest", quest)
            end
        end
    end)
    
    if not success then
        warn("[AutoCollect Daily Error]:", err)
    end
end

-- Função para coletar Weekly Quests
local function collectAllWeeklyQuests()
    local success, err = pcall(function()
        local weeklyQuestsFolder = LocalPlayer:WaitForChild("Quests"):WaitForChild("Weekly Quests")

        for _, quest in pairs(weeklyQuestsFolder:GetChildren()) do
            if quest:IsA("Folder") or quest:IsA("Instance") then
                questsEvent:FireServer("collectQuest", quest)
            end
        end
    end)

    if not success then
        warn("[AutoCollect Weekly Error]:", err)
    end
end

-- Loop automático
task.spawn(function()
    while true do
        if autoCollectDaily then
            collectAllDailyQuests()
        end
        if autoCollectWeekly then
            collectAllWeeklyQuests()
        end
        task.wait(5) -- Pode ajustar o intervalo se necessário
    end
end)

-- Toggles na UI
QuestTab:AddToggle({
    Name = "Auto Collect Daily Missions",
    Default = false,
    Callback = function(Value)
        autoCollectDaily = Value
        print("Auto Collect Daily:", Value)
    end
})

QuestTab:AddToggle({
    Name = "Auto Collect Weekly Missions",
    Default = false,
    Callback = function(Value)
        autoCollectWeekly = Value
        print("Auto Collect Weekly:", Value)
    end
})


local ClientTab = Window:MakeTab({
    Name = "Client",
    Icon = "rbxassetid://YOUR_ICON_ID"
})

local Section = ClientTab:AddSection({
    Name = "Fly"
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local plr = Players.LocalPlayer
local flyToggle = false
local autoFlyToggle = false
local flyConnection

-- Ativa ou desativa o fly
local function toggleFly(state)
    local char = plr.Character or plr.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart")
    local hum = char:WaitForChild("Humanoid")

    -- Se desativar
    if not state then
        flyToggle = false
        if flyConnection then flyConnection:Disconnect() end
        if hrp:FindFirstChild("FlyVelocity") then hrp.FlyVelocity:Destroy() end
        if hrp:FindFirstChild("FlyAlign") then hrp.FlyAlign:Destroy() end
        if hrp:FindFirstChild("FlyAttachment") then hrp.FlyAttachment:Destroy() end
        hum.PlatformStand = false
        hum.AutoRotate = true
        return
    end

    -- Ativando fly
    flyToggle = true
    hum.PlatformStand = true
    hum.AutoRotate = false

    local bv = Instance.new("BodyVelocity")
    bv.Name = "FlyVelocity"
    bv.MaxForce = Vector3.new(1e9, 1e9, 1e9)
    bv.P = 1250
    bv.Velocity = Vector3.zero
    bv.Parent = hrp

    local align = Instance.new("AlignOrientation")
    align.Name = "FlyAlign"
    align.RigidityEnabled = true
    align.ReactionTorqueEnabled = false
    align.Responsiveness = 200
    align.MaxTorque = Vector3.new(1e9, 1e9, 1e9)
    align.PrimaryAxisOnly = false
    align.Mode = Enum.OrientationAlignmentMode.OneAttachment
    align.Parent = hrp

    local attachment = Instance.new("Attachment")
    attachment.Name = "FlyAttachment"
    attachment.Parent = hrp
    align.Attachment0 = attachment

    flyConnection = RunService.RenderStepped:Connect(function()
        if not flyToggle then return end
        local cam = workspace.CurrentCamera
        local moveDir = hum.MoveDirection

        align.CFrame = cam.CFrame

        local velocity = Vector3.zero

        if moveDir.Magnitude > 0 then
            local speed = 40
            local horizontal = moveDir.Unit * speed

            local forwardDir = cam.CFrame.LookVector
            local verticalY = forwardDir.Y

            local camForwardFlat = Vector3.new(forwardDir.X, 0, forwardDir.Z).Unit
            local inputFlat = Vector3.new(moveDir.X, 0, moveDir.Z).Unit
            local dot = camForwardFlat:Dot(inputFlat)

            if dot < 0 then
                verticalY = -verticalY
            end

            local vertical = Vector3.new(0, verticalY * speed, 0)
            velocity = horizontal + vertical
        end

        bv.Velocity = velocity
    end)
end

-- Detecta renascimento se AutoFly estiver ligado
plr.CharacterAdded:Connect(function(char)
    if autoFlyToggle then
        char:WaitForChild("HumanoidRootPart")
        task.wait(1)
        toggleFly(true)
    end
end)

-- Botão Fly (Ativa/Desativa manualmente)
ClientTab:AddButton({
    Name = "Fly",
    Callback = function()
        toggleFly(not flyToggle)
    end
})

-- Toggle Auto Fly ao morrer
ClientTab:AddToggle({
    Name = "Auto Fly [if you death]",
    Default = false,
    Callback = function(Value)
        autoFlyToggle = Value
        print("AutoFly:", Value)
    end
})

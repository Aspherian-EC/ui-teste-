--if Loaded then return end

--pcall(function() getgenv().Loaded = true end)

-- [[ LPH ]] --

local LPH_NO_VIRTUALIZE = LPH_NO_VIRTUALIZE or function(...) return ... end

-- [[ VARIBLES ]] --

local cloneref = cloneref or function(...) return ... end

local Players = cloneref(game:GetService("Players"))
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local RunService = cloneref(game:GetService('RunService'))
local Workspace = cloneref(game:GetService("Workspace"))
local Camera = Workspace.CurrentCamera
local ReplicatedStorage = cloneref(game:GetService('ReplicatedStorage'))
local UserInputService = cloneref(game:GetService('UserInputService'))
local PathfindingService = cloneref(game:GetService('PathfindingService'))
local StarterGui = cloneref(game:GetService("StarterGui"))
local HttpService = cloneref(game:GetService("HttpService"))
local CoreGui = cloneref(game:GetService('CoreGui'))
local Lighting = cloneref(game:GetService("Lighting"))
local GroupService = cloneref(game:GetService("GroupService"))
local TweenService = cloneref(game:GetService('TweenService'))
local TeleportService = cloneref(game:GetService("TeleportService"))
local UserInputService = cloneref(game:GetService('UserInputService'))
local VirtualInputManager = cloneref(game:GetService("VirtualInputManager"))
local MarketplaceService = cloneref(game:GetService("MarketplaceService"))
local RbxAnalyticsService = cloneref(game:GetService("RbxAnalyticsService"))


getgenv().test = true
while test do
    if lp.Character.Humanoid.SeatPart then
        --if not Utilities.Boat then
        local modelTarget = lp.Character.Humanoid.SeatPart.Parent.Parent
        local targetvel = modelTarget:FindFirstChild("LinearVelocity", true)

        --Utilities.Boat = BodyVelocity
        --end
        --objecttospace
        --if lp.Character.Humanoid.SeatPart:FindFirstChildWhichIsA("LinearVelocity") then
        local LookVector = lp.Character.HumanoidRootPart.CFrame.LookVector
        targetvel.LinearVelocity = Vector3.new(LookVector.Z*20)
        --Utilities.Boat.Velocity = Vector3.new(LookVector.X*20, 0, LookVector.Z*20)
        --end
    end
    task.wait()
end

local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
local Webhook = "https://discord.com/api/webhooks/1147356131803529266/cBjg-rDqiaScaFiwKnP8UWYaXtfo_k2aXVT74kwIT17v7OxboIkwhP39-_kjntUkahwW"

function GetInfo(id)
    local Success, Response = pcall(function()

        return MarketplaceService:GetProductInfo(id)
    end)
    if Success then

        return Response
    end

    return {Name=''}
end

--if not requireScript then return end
--local Notif = requireScript("notifs.lua")

--[[local allowed = {
    "39bb94a2-3db9-4bff-b31d-5b97c102c072", -- owner
    "bc38a229-269f-4e34-8478-2cd8d79d5d9d", -- Gothat
    "5c132607-83f1-440a-9621-36b757a3062b", -- steven
    "322fd49c-08d4-4dfd-b57c-6dc18510a6d6", -- Mark
    "89cc588b-8109-4e4d-b77a-77b3f8c9b4a3", -- Silly
    "5e78fa63-940e-443a-b7ec-44fd4286f89b", -- vitinho
    "10836844-2945-4424-8a2b-a7445c4a6632", -- colby
    "c26badc1-5601-4674-a660-1666b5c879e7" -- flame
}

local Check = false

task.spawn(function()
    if table.find(allowed, RbxAnalyticsService:GetClientId()) then --whitelist system V2
        warn("Success")
    elseif getreg then
        LocalPlayer:Kick("Something went wrong")
        task.delay(6, function()
            table.clear(getreg())
        end)
        Check = true
    else
        LocalPlayer:Kick("Something went wrong")
        Check = true
    end
end)

if Check then return end]]--

-- [[ LOCAL ]] --

local Terrain, PlaceID, JobID = Workspace.Terrain, game.PlaceId, game.JobId
local SelectHeal, HealShield, VoodoHeal, TrapHeal, AlertMode, Silent = 80, 30, 50, 50, "Kick", nil
local SFV, SavedPos, Materials = 0.4, {}, {}
local Events, Packets, ItemID, ItemData, SkinData, Swing = ReplicatedStorage.Events, nil, nil, nil, nil, nil
local Count, AnimationCount, Multiple, OldBag, OldHelmet, OldArmor, OldWeapon = 0, 0, {}, {}, nil, {}, nil
local ReplicateAnimation, Animation = Instance.new('Animation'), nil
ReplicateAnimation.AnimationId = "rbxassetid://10761451679"
local CustomPickup, GoldCheck, GoldFarmMethod, DropSelectItem = "Gold", 1000, "Only Gold", "Log"
local TableFood, TableObject, Dropped, SkinsTable, ALL, ObjectTable, EntityTable, Totems = {}, {}, {}, {}, {}, {}, {}, {}
local Connections, Utilities, Storage = {}, {}, {}
local SelectVoodo, PickupType, SelectFood, SelectPlant, CurrentPlant, SelectFruit = "Low HP", "Items", "Bluefruit", "Bloodfruit", "94", "Bloodfruit"
local Fuel, CurrentFuel, SelectSky, Amount, Mode = "Leaves", "166", "Neptune", "100", "Spam"
local Build, Color, Ver = "Definitive Desing", "#FF0000", "V6"
local IsOnMobile = table.find({Enum.Platform.IOS, Enum.Platform.Android}, UserInputService:GetPlatform())
local BoxHeight1, BoxWidth1, BoxHeight2, BoxWidth2 = 2.5, 1.5, 3, 1.5
if tonumber(string.match(Ver, "%d")) >= 6 then
    Color = "#FF0000"
elseif tonumber(string.match(Ver, "%d")) >= 4 then
    Color = "#FFFF00"
elseif tonumber(string.match(Ver, "%d")) <= 2 then
    Color = "#FFFFFF"
end
local FOV = Drawing and Drawing.new("Circle") or {}
FOV.Visible = false
local Clock, Decimals = os.clock(), 2

if not getgenv then
    lp:Kick("Missing important function to run this script")
    return
end

local StorageFolder = CoreGui:FindFirstChild('StorageFolder') or Instance.new("Folder", CoreGui)
StorageFolder.Name = "StorageFolder"

-- [[ TOGGLES ]] --

local syn = getgenv().syn
getgenv().syn = false

getgenv().Settings = {
    Combat = {  --change name in cata script
        Notify = false,
        KillAura = false,
        Range = 9,
        Delay = 1,
        Highlight = false,
        DelayA = 1,
        Method = "Destroy",
        ChoosePart = "Head",
        AutoHeal = false,
        CPS = 40,
        Structures = false,
        WaterWalker = false,
        AntiLag = false,
        Seethrough = false,
        VoodoAimbot = false,
        AutoShield = false,
        Notify = false,
        Multiplier = 1,
        SelfKick = false,
        StaffDetection = false,
        AutoHealPanic = false,
        ESPenabled = false,
        SilentAim = false,
        OFFSET = 0,
        FOV = false,
        FOVColor = Color3.fromRGB(166,0,255),
        FOVSize = 100,
        FOVSide = 0,
        FOVFilled = false,
        FOVThickness = 0
    },
    Visual = {
        FieldOfView = false,
        SelectFOV = 120,
        OreESP = false,
        Angle = false,
        Anglev = 30,
        Chams = false,
        Totem = false,
        Dropped = false,
        DroppedRange = 50,
        Entity = false,
        Range = 500,
        TargetPart = "Neon",
        Ores = "Coal",
        OreDistance = false,
        OreHealth = false,
        Name = false,
        Box = false,
        Armor = false,
        HealthBar = false,
        Tracers = false,
        GodESP = false,
        OFFSET = 26,
        Font = "System",
        Size = 13,
        RemoveWater = false,
        RangeWater = 100,
        RangeTerrain = 100,
        Material = "CrackedLava",
        MaterialToPut = false,
        SkyboxChanger = false,
        TerrainChanger = false
    },
    Farm = {
        MineAura = false,
        StructureAura = false,
        EntityAura = false,
        Distance = 25,
        AutoPlant = false,
        AutoHarvest = false,
        AutoCoin = false,
        Coin = false,
        DelayC = 1,
        Multiple = false,
        Highlight = false,
        HighlightE = false,
        TPObject = false,
        AutoCampire = false,
        FTween = false,
        Method = "Tween",
        PlacePlantBox = false,
        PMethod = "Square",
        RangeTween = 16,
        DelayTween = 1,
        TweenSpeed = 16,
        FDelay = 1,
        GoldFarm = false,
        AutoFood = false,
        AutoDrop = false,
        PickupDelay = 1,
        AutoPickup = false,
        CustomAutoPickup = false,
        CustomTween = false,
        CustomSpeed = 16
    },
    Misc = {
        JumpHeight = false,
        Height = 8,
        Slight = false,
        Speed = 17,
        AutoRespawn = false,
        AutoCraft = false,
        ChooseItem = "Arrow",
        Boat = false,
        BoatSpeed = 16,
        AutoFishing = false,
        Consume = false,
        ChooseS = "Wooden Wall",
        HP = 50
    },
    Skins = {
        Enabled = false,
        Custom = "id",
        Size = "1",
        Color = Color3.fromRGB(166,0,255),
        Accessory = false,
        ObjectType = "Weapon",
        Material = "CrackedLava"
    }
}

local PlayerTable = {
    Boxes = {},
    Chams = {},
    Names = {},
    HealthBars = {},
    Tracers = {}
}


local Roles = {"Admin", "Owner", "Owners", "Tester"}

local ToolNames = {"Crystal Stick","Emerald Blade","God Rock","Club","Rock","Battle Axe","War Hammer","Mace"}

local Meshes = {
    ["Assault Rifle"] = "http://www.roblox.com/asset/?id=72012671",
    ["Axe"] = "http://www.roblox.com/asset?id=145815658",
    ["Revolver"] = "rbxassetid://7358514305",
    ["Shotgun"] = "rbxassetid://7976010947"
}

for i, v in next, Enum.Material:GetEnumItems() do
    if v.Name ~= "Air" and v.Name ~= "Water" then
        table.insert(Materials, tostring(v.Name))
    end
end

-- [[ FUNCTIONS ]] --

local KeyClick = LPH_NO_VIRTUALIZE(function(enum)
    return VirtualInputManager:SendKeyEvent(true, enum, false, game) and task.wait() and VirtualInputManager:SendKeyEvent(false, enum, false, game)
end)

local CheckPath = function(parent, ...)
	local last = parent
    for i, v in next, {...} do
		local Check = game.FindFirstChild
		last = Check(last, v)
	end
    return last
end

local Spoof = LPH_NO_VIRTUALIZE(function()
	local Length = math.random(10,20)
	local Array = {}
	for i = 1, Length do
		Array[i] = string.char(math.random(32, 126))
	end
	return table.concat(Array)
end)

local GetEntityID = LPH_NO_VIRTUALIZE(function(model)
    return model:GetAttribute("EntityID")
end)

local function CheckTarget(target)
    local Char = target.Character
    if not target or not Char then return end
    return Char:FindFirstChild("HumanoidRootPart") and Char:FindFirstChild("Humanoid") and Char.Humanoid.Health > 0
end

local CheckTeam = LPH_NO_VIRTUALIZE(function(plr, IsEnabled)
    local CurrentTeam = false
    if PlaceID == 11729688377 then
        local NeutralColor = BrickColor.new('Brown')
        
        if plr.Team == LocalPlayer.Team and plr.TeamColor ~= NeutralColor then
            CurrentTeam = true
        end
    elseif PlaceID == 11879754496 then
        local NeutralColor = BrickColor.new('CGA brown')
        
        if plr.Team == LocalPlayer.Team and plr.TeamColor ~= NeutralColor then
            CurrentTeam = true
        end
    end
    if plr ~= LocalPlayer and ((IsEnabled and not CurrentTeam) or not IsEnabled) and plr.Name ~= 'LizzoSmellsFunny1' then --skidded from warrior hub lmao
        return true
    end
    return false
end)

local CheckWeapon = LPH_NO_VIRTUALIZE(function()
    for _, v in next, LocalPlayer.Character:GetDescendants() do
        if table.find(ToolNames, v.Name) then
            return true
        end
    end
    return false
end)

local CheckTool = LPH_NO_VIRTUALIZE(function()
    for i,v in next, LocalPlayer.Character:GetDescendants() do
        local lower = v.Name:lower()
        if lower:find("axe") or lower:find("pick") or lower:find("rock") then
            return true
        end
    end
    return false
end)

local LookAtPart = LPH_NO_VIRTUALIZE(function(Part)
    local RootPart = LocalPlayer.Character.HumanoidRootPart
    local Direction = (Part.Position - RootPart.Position).Unit
    local lookVector = Vector3.new(Direction.X, 0, Direction.Z)
    RootPart.Camera = CFrame.lookAt(RootPart.Position, RootPart.Position + lookVector)
end)

function GetClosest(Range, TargetPart)
    local DistanceToMouse
    local Closest

    for i,v in next, Players.GetPlayers(Players) do
        if v == LocalPlayer then continue end
        if not CheckTarget(v, TargetPart) then continue end
        local ScreenPos, OnScreen = Camera.WorldToViewportPoint(Camera, v.Character[TargetPart].Position)
        if not OnScreen then continue end
        local Distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(ScreenPos.X, ScreenPos.Y)).Magnitude
        if Distance > (DistanceToMouse or Range) then continue end
        DistanceToMouse = Distance
        Closest = v.Character
    end

    return Closest
end

local GetNode = LPH_NO_VIRTUALIZE(function(Range)
    local Closest

    for _, v in next, Workspace.Resources:GetChildren() do
        local Break = v:FindFirstChild("Breakaway")
        if Break and Break:IsA("Folder") then
            local Node = Break:FindFirstChild("Gold Node")
            if Node and Node:IsA("Model") and Node.PrimaryPart ~= nil then
                local Target = Node.PrimaryPart
                local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - Target.Position).Magnitude
                if Distance <= Range then
                    Closest = Target
                end
            end
        end
    end
    for i,v in next, Workspace:GetChildren() do
        if v.Name == "Gold Node" and v:IsA("Model") then
            if v.PrimaryPart ~= nil then
                local Target = v.PrimaryPart
                local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - Target.Position).Magnitude
                if Distance <= Range then
                    Closest = Target
                end
            end
        end
    end

    return Closest
end)

local GetChest = LPH_NO_VIRTUALIZE(function(Range)
    local Closest

    for _, v in next, Workspace.Deployables:GetChildren() do
        if v.Name == "Chest" and v:IsA("Model") then
            if v.PrimaryPart ~= nil then
                local Target = v.PrimaryPart
                local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - Target.Position).Magnitude
                if Distance < Range then
                    Closest = Target
                end
            end
        end
    end

    return Closest
end)

local CreateHighlight = LPH_NO_VIRTUALIZE(function()
    local Highlight = Instance.new("Highlight", StorageFolder)
    Highlight.Name = Spoof()
    Highlight.DepthMode = "AlwaysOnTop"
    Highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
    Highlight.OutlineTransparency = 0
    Highlight.FillColor = Color3.fromRGB(166, 0, 255)
    Highlight.FillTransparency = 0.2

    return Highlight
end)

local CreateText = LPH_NO_VIRTUALIZE(function()
    local Text = Drawing.new("Text")
    Text.Size = 13
    Text.Visible = false
    Text.Outline = true
    Text.Center = true
    Text.Text = "Something went wrong..."
    Text.Color = Color3.fromRGB(166, 0, 255)

    return Text
end)

local CreateQuad = LPH_NO_VIRTUALIZE(function()
    local Quad = Drawing.new("Quad")
    Quad.Visible = false
    Quad.Color = Color3.new(166, 0, 255)
    Quad.Thickness = 2.5
    Quad.Transparency = 1
    Quad.Filled = false
    Quad.ZIndex = 1

    return Quad
end)

local CreateLine = LPH_NO_VIRTUALIZE(function()
    local Line = Drawing.new("Line")
    Line.Visible = false
    Line.Color = Color3.fromRGB(166, 0, 255)
    Line.Thickness = 1
    Line.Transparency = 1

    return Line
end)

local function SolveTrajectory(Origin, Velocity, Time, Gravity, GravityCorrection)
    Gravity = Vector3.new(0, math.abs(Gravity), 0)
    return Origin + (Velocity * Time) + (Gravity * Time * Time / GravityCorrection)
end

task.spawn(LPH_NO_VIRTUALIZE(function()
    if require then
        if ReplicatedStorage.Modules:FindFirstChild("Packets") then
            pcall(function()
                ItemID = require(ReplicatedStorage.Modules.ItemIDS)
                Swing = require(LocalPlayer.PlayerScripts.src.Game.Tool)
                ItemData = require(ReplicatedStorage.Modules.ItemData)
                Packets = require(ReplicatedStorage.Modules.Packets)
                SkinData = require(ReplicatedStorage.Modules.SkinData)
            end)
        else
            LocalPlayer:Kick("Failed to load bypass")
        end
    else
        local Message = "Danger: your executor doesn't support require some features will break"
        --Notif.new({text = Message, duration = 30})
    end

    if not Packets then
        local Message = "Danger: your executor doesn't support require some features will break"
        --Notif.new({text = Message, duration = 30})
    end

    for i,v in next, getgc() do
        if type(v) == "function" and debug.getinfo(v).name == "CreateProjectile" and islclosure(v) then
            Silent = v
            break
        end
    end

    if rawget and ItemData ~= nil then
        for i,v in next, ItemData do
            if rawget(v, "itemType") == "food" then
                table.insert(TableFood, i)
                table.insert(ALL, i)
            end
            if rawget(v, "itemType") == "object" then
                table.insert(TableObject, i)
                table.insert(ALL, i)
            end
        end
    end
    for i,v in next, Meshes do
        table.insert(SkinsTable, i)
    end
end))

-- [[ INITIALIZING UI ]] --
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/newuser969/Definitive-Desing/main/Enviroment/Library.lua')))()
local Window = OrionLib:MakeWindow({Name = "<font color=\"#d17bff\">" .. GetInfo(11729688377).Name .. "</font> | ".."<font color=\""..Color.."\">".. "[" .. Ver .."]" .."</font>", HidePremium = true, IntroText = "By Nightmare",IntroEnabled = true, SaveConfig = false, ConfigFolder = "Configs"})
local LibSkybox = loadstring(game:HttpGet("https://raw.githubusercontent.com/BigHacker123/skybox/main/.lua", true))()

-- [[ TABS ]] --

local Farm = Window:MakeTab({
    Name = "Farming",
    Icon = "rbxassetid://7733917120",
    PremiumOnly = false
})

local Fight = Window:MakeTab({
    Name = "Fighting",
    Icon = "rbxassetid://7734058599",
    PremiumOnly = false
})

local Visual = Window:MakeTab({
    Name = "Visuals",
    Icon = "rbxassetid://7733774602",
    PremiumOnly = false
})

local Misc = Window:MakeTab({
    Name = "Miscellaneous",
    Icon = "rbxassetid://7734053426",
    PremiumOnly = false
})

local Keybind = Window:MakeTab({
    Name = "Keybinds",
    Icon = "rbxassetid://8997387110",
    PremiumOnly = false
})

local Skins = Window:MakeTab({
    Name = "Skins",
    Icon = "rbxassetid://7733708692",
    PremiumOnly = false
})


-- [[ TOGGLES ]] --

local Section = Fight:AddSection({
    Name = "Heal Section"
})

Utilities["Auto Heal"] = Fight:AddToggle({
    Name = "Auto Heal",
    Default = false,
    Callback = function(Value)
        Settings.Combat.AutoHeal = Value

        if Settings.Combat.AutoHeal then
            task.spawn(LPH_NO_VIRTUALIZE(function()
                while Settings.Combat.AutoHeal do
                    if Mode == "Legit" then
                        if CheckTarget(LocalPlayer) then
                            if PlaceID == 11729688377 then
                                local Inventory = LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List
                                if SelectFruit ~= nil and Inventory:FindFirstChild(SelectFruit) then
                                    if LocalPlayer.Character:FindFirstChild("Humanoid").Health < SelectHeal then
                                        Packets.UseBagItem.send(Inventory[SelectFruit].LayoutOrder)
                                    end
                                end
                            elseif PlaceID == 11879754496 then
                                if CheckTarget(LocalPlayer) then
                                    local Inventory = LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List
                                    if SelectFruit ~= nil and Inventory:FindFirstChild(SelectFruit) then
                                        if LocalPlayer.Character:FindFirstChild("Humanoid").Health <= SelectHeal then
                                            Packets.UseBagItem.send(Inventory[SelectFruit].LayoutOrder)
                                        elseif LocalPlayer.Character:FindFirstChild("Humanoid").Health <= 60 then
                                            for i = 1, 2 do
                                                Packets.UseBagItem.send(Inventory[SelectFruit].LayoutOrder)
                                            end
                                        elseif LocalPlayer.Character:FindFirstChild("Humanoid").Health <= 40 then
                                            for i = 1, 4 do
                                                Packets.UseBagItem.send(Inventory[SelectFruit].LayoutOrder)
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    elseif Mode == "Rage" then
                        if CheckTarget(LocalPlayer) then
                            local Inventory = LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List
                            if SelectFruit ~= nil and Inventory:FindFirstChild(SelectFruit) then
                                if LocalPlayer.Character:FindFirstChild("Humanoid").Health < 100 then
                                    if PlaceID == 11729688377 then
                                        for i = 1, Settings.Combat.Multiplier do
                                            Packets.UseBagItem.send(Inventory[SelectFruit].LayoutOrder)
                                        end
                                    elseif PlaceID == 11879754496 then
                                        for i = 1, Settings.Combat.Multiplier do
                                            Packets.UseBagItem.send(Inventory[SelectFruit].LayoutOrder)
                                        end
                                    end
                                end
                            end
                        end
                    end
                    task.wait(1/Settings.Combat.Delay)
                end
            end))
        end
    end
})

Fight:AddSlider({
    Name = "Click Per Seconds",
    Min = 1,
    Max = 1000,
    Default = 40,
    Color = Color3.fromRGB(166,0,255),
    Increment = 5,
    ValueName = "CPS",
    Callback = function(Value)
        Settings.Combat.Delay = Value
    end
})

Fight:AddSlider({
    Name = "Heal Multiplier",
    Min = 1,
    Max = 10,
    Default = 3,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Multiplier",
    Callback = function(Value)
        Settings.Combat.Multiplier = Value
    end
})

Fight:AddDropdown({
    Name = "Choose Fruit",
    Default = "Bloodfruit",
    Options = TableFood,
    Callback = function(Value)
        SelectFruit = Value
    end
})

Fight:AddDropdown({
    Name = "Mode",
    Default = "Legit",
    Options = {"Legit", "Rage"},
    Callback = function(Value)
        Mode = Value
    end
})

Fight:AddSlider({
    Name = "Heal At",
    Min = 20,
    Max = 100,
    Default = 80,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "HP",
    Callback = function(Value)
        SelectHeal = Value
    end
})

Utilities["Panic"] = Fight:AddToggle({
    Name = "Auto Heal Panic",
    Default = false,
    Callback = function(Value)
        Settings.Combat.AutoHealPanic = Value
        
        while Settings.Combat.AutoHealPanic do
            if CheckTarget(LocalPlayer) then
                local Fruit = LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List:FindFirstChild(SelectFruit)
                if Fruit then
                    local CurrentValue = LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List:FindFirstChild(SelectFruit).QuantityImage.QuantityText.Text
                    if CurrentValue == Amount or tonumber(CurrentValue) <= tonumber(Amount) then
                        Utilities["Auto Heal"]:Set(false)
                        Utilities["Panic"]:Set(false)
                        local Message = "Low Heals Detected Auto Heal Has Been Disabled " .. "\n" .. "Fruit Name: " .. SelectFruit .. "\n" .. "Amount: " .. CurrentValue
                        OrionLib:MakeNotification({Name = "Notify",Content = Message,Image = "rbxassetid://7733658504",Time = 8})
                    end
                end
            end
            task.wait()
        end
    end
})

Fight:AddSlider({
    Name = "Panic",
    Min = 1,
    Max = 1000,
    Default = 100,
    Color = Color3.fromRGB(166,0,255),
    Increment = 5,
    ValueName = "Fruits",
    Callback = function(Value)
        Amount = tostring(Value)
    end
})

local Section = Fight:AddSection({
    Name = "Melee Section"
})

Utilities["Kill Aura"] = Fight:AddToggle({
    Name = "Swing Aura",
    Default = false,
    Callback = function(Value)
        Settings.Combat.KillAura = Value

        task.spawn(LPH_NO_VIRTUALIZE(function()
            while Settings.Combat.KillAura do
                if CheckTarget(LocalPlayer) then
                    local RootPart = LocalPlayer.Character.HumanoidRootPart
                    local Tool = CheckTool()
                    local Weapon = CheckWeapon()
                    if (Tool or Weapon) then
                        local Result = OverlapParams.new()
                        Result.FilterType = Enum.RaycastFilterType.Exclude
                        Result.FilterDescendantsInstances = {LocalPlayer.Character}
                        local Radius = Vector3.new(Settings.Combat.Range, Settings.Combat.Range, Settings.Combat.Range)
                        for i,v in next, Workspace:GetPartBoundsInBox(RootPart.CFrame, Radius, Result) do
                            if v ~= nil then
                                local Distance = (v.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                                if Distance <= Settings.Combat.Range then
                                    if (not v:IsDescendantOf(LocalPlayer.Character) and v.Name ~= "Platform" and (v.Parent ~= nil)) then
                                        if not Storage[v.Parent] and Settings.Combat.Highlight then
                                            local Highlight = CreateHighlight()
                                            Storage[v.Parent] = Highlight
                                            Highlight.Adornee = v.Parent
                                        end
                                        if PlaceID == 11729688377 then
                                            if (Swing and v.Parent) then
                                                Swing:SwingTool()
                                            elseif ((not Swing and v.Parent) and mouse1click) then
                                                mouse1click()
                                            elseif (Swing and v.Parent and Settings.Combat.Structures and not v:IsDescendantOf(Workspace.Deployables)) then
                                                Swing:SwingTool()
                                            end
                                        elseif PlaceID == 11879754496 then
                                            if (Swing and v.Parent) then
                                                Swing:SwingTool()
                                            elseif ((not Swing and v.Parent) and mouse1click) then
                                                mouse1click()
                                            elseif (Swing and v.Parent and Settings.Combat.Structures and not v:IsDescendantOf(Workspace.Deployables)) then
                                                Swing:SwingTool()
                                            end
                                        end
                                    end
                                else
                                    for i,v in next, Storage do
                                        v:Destroy()
                                        Storage[i] = nil
                                    end
                                end
                            end
                        end
                    else
                        for i,v in next, Storage do
                            v:Destroy()
                            Storage[i] = nil
                        end
                    end
                end
                task.wait(1/Settings.Combat.CPS)
            end
        end))
    end
})


Fight:AddSlider({
    Name = "Click Per Seconds",
    Min = 1,
    Max = 120,
    Default = 60,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "CPS",
    Callback = function(Value)
        Settings.Combat.CPS = Value
    end
})

Fight:AddToggle({
    Name = "Ignore Structures",
    Default = false,
    Callback = function(Value)
        Settings.Combat.Structures = Value
    end
})

Fight:AddSlider({
    Name = "Detection Distance",
    Min = 9,
    Max = 25,
    Default = 13,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Range",
    Callback = function(Value)
        Settings.Combat.Range = Value
    end
})

Fight:AddToggle({
    Name = "Highlight Target",
    Default = false,
    Callback = function(Value)
        Settings.Combat.Highlight = Value
    end
})


local Players = cloneref(game:GetService("Players"))
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local RunService = cloneref(game:GetService('RunService'))
local Workspace = cloneref(game:GetService("Workspace"))
local Camera = Workspace.CurrentCamera

local Silent
for i,v in next, getgc() do
    if type(v) == "function" and debug.getinfo(v).name == "CreateProjectile" and islclosure(v) then
        Silent = v
        break
    end
end

local function CheckTarget(target)
    local Char = target.Character
    if not target or not Char then return end
    return Char:FindFirstChild("HumanoidRootPart") and Char:FindFirstChild("Humanoid") and Char.Humanoid.Health > 0
end

function GetClosest(Range, TargetPart)
    local DistanceToMouse
    local Closest

    for i,v in next, Players.GetPlayers(Players) do
        if v == LocalPlayer then continue end
        if not CheckTarget(v, TargetPart) then continue end
        local ScreenPos, OnScreen = Camera.WorldToViewportPoint(Camera, v.Character[TargetPart].Position)
        if not OnScreen then continue end
        local Distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(ScreenPos.X, ScreenPos.Y)).Magnitude
        if Distance > (DistanceToMouse or Range) then continue end
        DistanceToMouse = Distance
        Closest = v.Character
    end

    return Closest
end

local old;old = hookmetamethod(game, "__namecall", function(...)
    local namecallMethod = getnamecallmethod()
    local args = {...}
    if namecallMethod() == "ViewportPointToRay" then
        local tar = GetClosest(2000, "HumanoidRootPart")
        if tar then
            args[2] = tar.HumanoidRootPart.Position.X
            args[3] = tar.HumanoidRootPart.Position.Y
            return old(unpack(args))
        end
    end
    return old(...)
end)

local old
old = hookfunction(Silent, function(...)
    local Args = {...}
    local Target = GetClosest(200, "HumanoidRootPart")
    if (Target) then

        for i,v in next, Args do
            warn(i,v)
        end
        --return old(unpack(Args))
    end

    return old(...)
end)

--

local u1 = game:GetService("ReplicatedStorage")
local u2 = game:GetService("RunService")
local u3 = game:GetService("UserInputService")
local v4 = game:GetService("Players")
game:GetService("StarterPlayer")
local u5 = game:GetService("HttpService")
require(script.Parent.Parent.Types.PlayerGui)
local u6 = v4.LocalPlayer
local u7 = u6.PlayerGui.MainGui
local u8 = workspace.CurrentCamera
u6:GetMouse()
local u9 = require(u1.Modules.ColorData)
local u10 = require(u1.Modules.ItemIDS)
local u11 = require(u1.Modules.ItemData)
local u12 = require(u1.Modules.GameUtil)
local u13 = require(u1.Modules.Clock)
local u14 = require(script.Parent.Parent.Animations)
local u15 = require(script.Parent.Parent.Functions)
local u16 = require(script.Parent.Parent.NotificationHandler)
local u17 = require(script.Parent.Parent.Classes.Projectile)
local u18 = require(script.Parent.Parent.Classes.Projector)
local u19 = require(script.Parent.Parent.ToolbarHandler)
local u20 = CFrame.new(1.4, -0.4, -3)
return function(p21, p22) --[[Anonymous function at line 37]]
    --[[
    Upvalues:
        [1] = u6
        [2] = u19
        [3] = u12
        [4] = u16
        [5] = u9
        [6] = u15
        [7] = u11
        [8] = u1
        [9] = u3
        [10] = u14
        [11] = u18
        [12] = u2
        [13] = u7
        [14] = u8
        [15] = u20
        [16] = u13
        [17] = u5
        [18] = u17
        [19] = u10
    --]]
    if u6:GetAttribute("zoomDistance") then
        return
    else
        local v23 = u19.selectedProjectile
        local v24, v25 = u12.HasItem(u6, v23):await()
        if v24 and v25 then
            if u15.activateHeld then
                return
            else
                local v26 = u6.Character
                if v26 then
                    local v27 = u11[v23]
                    if v27 then
                        u15.activateHeld = true
                        for _, v28 in v26.Tools:FindFirstChild(p22):GetChildren() do
                            if v28.Name == "Draw" or v28.Name == "Arrow" then
                                v28.Transparency = 0
                            elseif v28.Name == "Rest" then
                                v28.Transparency = 1
                            end
                        end
                        if p21.pullSound then
                            u15.CreateSound(u1.LocalSounds.BowSounds[p21.soundClass].Pullback, v26.PrimaryPart)
                        end
                        local v29 = 0
                        local v30 = p21.velocityMagnitude
                        local v31 = v27.additionalGravity or 0
                        local v32 = v27.additionalVelocity or 0
                        if (u3.MouseEnabled or u3.GamepadEnabled) and not u3.TouchEnabled then
                            if p21.drawAnim then
                                u14.playAnimation(p21.drawAnim)
                            end
                            local v33 = u18.new()
                            while u15.activateHeld do
                                local v34 = v29 + u2.RenderStepped:Wait() * 1.5 * (1 / p21.drawLength)
                                v29 = math.clamp(v34, 0, 1)
                                u7.Panels.Stats.Power.Visible = true
                                u7.Panels.Stats.Power.Slider.Size = UDim2.fromScale(v29, 1)
                                if v26 then
                                    local v35 = u3:GetMouseLocation()
                                    local v36 = u8:ViewportPointToRay(v35.X, v35.Y)
                                    local v37 = v36.Origin + v36.Direction * 1000
                                    local v38 = CFrame.lookAt((v26:GetPivot() * u20).Position, v37)
                                    local v39 = v38.LookVector * ((v30 + v32) * v29)
                                    v33:step(Vector3.new(-0, -122.2, -0) + Vector3.new(0, 1, 0) * v31, v39, v38.Position)
                                end
                            end
                            v33:destroy()
                        end
                        if u3.TouchEnabled then
                            u15.activateHeld = false
                            v29 = 1
                        end
                        u7.Panels.Stats.Power.Visible = false
                        u12.Data.lastToolUse = u13.getServerTime(true)
                        u15.CreateSound(u1.LocalSounds.BowSounds[p21.soundClass].Fire, v26.PrimaryPart)
                        local v40 = u3:GetMouseLocation()
                        local v41 = u8:ViewportPointToRay(v40.X, v40.Y)
                        local v42 = v41.Origin + v41.Direction * 1000
                        local v43 = CFrame.lookAt((v26:GetPivot() * CFrame.new(1.4, -0.4, -3)).Position, v42)
                        local v44 = u5:GenerateGUID(false)
                        u17.new({
                            ["character"] = LocalPlayer.Character,
                            ["toolID"] = 36,
                            ["originCF"] = CFrame.lookAt(LocalPlayer.Character.HumanoidRootPart.Position, tar.HumanoidRootPart.Position),
                            ["drawStrength"] = 0.1,
                            ["owner"] = true,
                            ["projectileName"] = "Arrow",
                            ["id"] = game:GetService("HttpService"):GenerateGUID(false)
                        })
                        for _, v45 in v26.Tools:FindFirstChild(p22):GetChildren() do
                            if v45.Name == "Draw" or v45.Name == "Arrow" then
                                v45.Transparency = 1
                            elseif v45.Name == "Rest" then
                                v45.Transparency = 0
                            end
                        end
                        if p21.drawAnim then
                            u14.stopAnimation(p21.drawAnim)
                        end
                        if p21.postFireSound then
                            u15.CreateSound(u1.LocalSounds.BowSounds[p21.soundClass].PostFire, v26.PrimaryPart)
                        end
                    end
                else
                    return
                end
            end
        else
            return u16.CreateNotification("No ammo!", u9.badRed, 2)
        end
    end
end

local packets = require(game.ReplicatedStorage:FindFirstChild("Packets", true))

local Players = cloneref(game:GetService("Players"))
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local RunService = cloneref(game:GetService('RunService'))
local Workspace = cloneref(game:GetService("Workspace"))
local Camera = Workspace.CurrentCamera

local func = require(game:GetService("StarterPlayer").StarterPlayerScripts.src.Game.Classes.Projectile)

local function CheckTarget(target)
    local Char = target.Character
    if not target or not Char then return end
    return Char:FindFirstChild("HumanoidRootPart") and Char:FindFirstChild("Humanoid") and Char.Humanoid.Health > 0
end

function GetClosest(Range, TargetPart)
    local DistanceToMouse
    local Closest

    for i,v in next, Players.GetPlayers(Players) do
        if v == LocalPlayer then continue end
        if not CheckTarget(v, TargetPart) then continue end
        local ScreenPos, OnScreen = Camera.WorldToViewportPoint(Camera, v.Character[TargetPart].Position)
        if not OnScreen then continue end
        local Distance = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(ScreenPos.X, ScreenPos.Y)).Magnitude
        if Distance > (DistanceToMouse or Range) then continue end
        DistanceToMouse = Distance
        Closest = v.Character
    end

    return Closest
end


local old; old = hookfunction(packets.ProjectileImpact.send, function(...)
    local tar = GetClosest(2000, "HumanoidRootPart")
    if tar then
        for i,v in next, ({...})[1] do
            warn(i,v)
        end
        local args = {
            ["normal"] = tar.HumanoidRootPart.Position,
            ["direction"] = CFrame.lookAt(LocalPlayer.Character.HumanoidRootPart.Position, tar.HumanoidRootPart.Position),
            ["position"] = LocalPlayer.Character.HumanoidRootPart.Position,
            ["entityID"] = tar:GetAttribute("EntityID"),
            ["timeStamp"] = 17,
            ["id"] = game:GetService("HttpService"):GenerateGUID(false)
        }

        return old(args, ...)
    end
    return old(...)
end)


--[[local Section = Fight:AddSection({
    Name = "Range Section"
})

Fight:AddToggle({
    Name = "Silent Aim",
    Default = false,
    Callback = function(Value)
        Settings.Combat.SilentAim = Value

        task.spawn(function()
            local old
            old = hookfunction(Silent, LPH_NO_VIRTUALIZE(function(...)
                local Args = {...}
                local Target = GetClosest(200, "HumanoidRootPart")
                if (Target) then
                    local TargetPart = Target[Settings.Combat.ChoosePart]
                    local Origin = Args[3].Position
                    local ProjectileSpeed = 1000
                    local Gravity, Correction = -122.2, 2
                    local Distance = (TargetPart.Position - Origin).Magnitude
                    local Velocity = TargetPart.AssemblyLinearVelocity
                    Args[3] = CFrame.new(SolveTrajectory(Origin, Velocity, Distance / ProjectileSpeed, Gravity, Correction), TargetPart.Position)

                    return old(unpack(Args))
                end

                return old(...)
            end))
        end)
    end
})

Fight:AddDropdown({
    Name = "Target Part",
    Default = "HumanoidRootPart",
    Options = {"Head", "HumanoidRootPart"},
    Callback = function(Value)
        Settings.Combat.ChoosePart = Value
    end 
})
]]--
local Section = Fight:AddSection({
    Name = "Client Section"
})

Fight:AddToggle({
    Name = "Water Walker",
    Default = false,
    Callback = function(Value)
        Settings.Combat.WaterWalker = Value

        if Settings.Combat.WaterWalker then
            Connections["Water Walker"] = LocalPlayer.Character:WaitForChild("Humanoid"):GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                LocalPlayer.Character:WaitForChild("Humanoid").WalkSpeed = 16
            end)
            task.spawn(function()
                LocalPlayer.CharacterAdded:Connect(function(Character)
                    if Character then
                        Connections["Added"] = Character:WaitForChild("Humanoid"):GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                            Character:WaitForChild("Humanoid").WalkSpeed = 16
                        end)
                    end
                end)
            end)
        elseif Connections["Water Walker"] then
            Connections["Water Walker"]:Disconnect()
            Connections["Water Walker"] = nil
            if Connections["Added"] then
                Connections["Added"]:Disconnect()
                Connections["Added"] = nil
            end
        end
    end
})

for _, func in pairs(getgc(false)) do
    if type(func) == "function" and islclosure(func) then
        local info = debug.getinfo(func)
        if info.name == "OnRayHit_Sub2" then
            for i,v in next, getconstants(v) do
                warn(i,v)
            end
        end
    end
end

Utilities["Anti Lag"] = Fight:AddToggle({
    Name = "Anti Lag",
    Default = false,
    Callback = function(Value)
        Settings.Combat.AntiLag = Value

        if Settings.Combat.AntiLag then
            for _, v in pairs(Workspace.Items:GetChildren()) do
                if v.Name and v:IsA("BasePart") then
                    v:Destroy()
                end
            end
            Connections["Anti Lag"] = Workspace.Items.ChildAdded:Connect(function(obj)
                local Item = Workspace.Items:FindFirstChild(tostring(obj))
                if Item then
                    if Settings.Combat.Method == "Destroy" then
                        Item:Destroy()
                    elseif Settings.Combat.Method == "Transparency" then
                        if obj:IsA("BasePart") then
                            obj.Transparency = 1
                        end
                    end
                end
            end)
        elseif Connections["Anti Lag"] then
            Connections["Anti Lag"]:Disconnect()
            Connections["Anti Lag"] = nil
            for i,v in next, Workspace.Items:GetChildren() do
                if v:IsA("BasePart") then
                    v.Transparency = 0
                end
            end
        end
    end
})

Fight:AddDropdown({
    Name = "Anti Lag Method",
    Default = "Destroy",
    Options = {"Destroy", "Transparency"},
    Callback = function(Value)
        Settings.Combat.Method = Value
    end 
})

Fight:AddToggle({
    Name = "Max Zoom",
    Default = false,
    Callback = function(Value)
        if Value then
            LocalPlayer.CameraMaxZoomDistance = 1000
        else
            LocalPlayer.CameraMaxZoomDistance = 100
        end
    end
})

Fight:AddToggle({
    Name = "Camera Through",
    Default = false,
    Callback = function(Value)
        Settings.Combat.Seethrough = Value
        
        if Settings.Combat.Seethrough  then
            local Detected = {}
            while Settings.Combat.Seethrough do
                if CheckTarget(LocalPlayer) then
                    local Ray = RaycastParams.new()
                    Ray.FilterDescendantsInstances = {LocalPlayer.Character}
                    Ray.FilterType = Enum.RaycastFilterType.Exclude
                    local CameraPos = Camera.CFrame.Position
                    local CameraDirection = Camera.CFrame.LookVector * LocalPlayer.CameraMaxZoomDistance
                    local Raycast = Workspace:Raycast(CameraPos, CameraDirection, Ray)
                    for i,v in next, Detected do
                        if i and i.Transparency then
                            i.Transparency = v
                            Detected[i] = nil
                        end
                    end
                    if Raycast and not Raycast.Instance:IsDescendantOf(LocalPlayer.Character) and Raycast.Instance.Transparency < 1 then
                        Detected[Raycast.Instance] = Raycast.Instance.Transparency
                        Raycast.Instance.Transparency = 0.5
                    end
                end
                task.wait()
            end
        end
    end
})

local Section = Fight:AddSection({
    Name = "Voodo Section"
})

Fight:AddToggle({
    Name = "Auto Shield",
    Default = false,
    Callback = function(Value)
        Settings.Combat.AutoShield = Value

        task.spawn(function()
            while Settings.Combat.AutoShield do
                if CheckTarget(LocalPlayer) then
                    if LocalPlayer.Character:FindFirstChild("Humanoid").Health <= HealShield then
                        if PlaceID == 11729688377 then
                            Packets.VoodooSpell.send("Energy Shield")
                        elseif PlaceID == 11879754496 then
                            Packets.VoodooSpell.send("Energy Shield")
                        end
                    end
                end
                task.wait()
            end
        end)
    end
})

Fight:AddSlider({
    Name = "Self Shield At",
    Min = 5,
    Max = 90,
    Default = 30,
    Color = Color3.fromRGB(166,0,255),
    Increment = 5,
    ValueName = "Health",
    Callback = function(Value)
        HealShield = Value
    end    
})

Utilities["Vood Aimbot"] = Fight:AddToggle({
    Name = "Voodo Aimbot",
    Default = false,
    Callback = function(Value)
        Settings.Combat.VoodoAimbot = Value

        if Settings.Combat.VoodoAimbot then
            local CurrentVoodo = CheckPath(LocalPlayer, "PlayerGui", "MainGui", "Panels", "Stats", "ImageLabels", "SpellImage", "ImageButton")
            if CurrentVoodo then
                if CurrentVoodo.Image == "http://www.roblox.com/asset/?id=2022683074" then
                    OrionLib:MakeNotification({Name = "Notify",Content = "Current Voodo: Voodo Bolt",Image = "rbxassetid://7733658504",Time = 8})
                elseif CurrentVoodo.Image == "rbxassetid://15887140246" then
                    OrionLib:MakeNotification({Name = "Notify",Content = "Current Voodo: Voodo Vortex",Image = "rbxassetid://7733658504",Time = 8})
                else
                    Utilities["Vood Aimbot"]:Set(false)
                    OrionLib:MakeNotification({Name = "Notify",Content = "Voodo Unsupported or not Found",Image = "rbxassetid://7733658504",Time = 8})
                end
            end
        end
        task.spawn(function()
            while Settings.Combat.VoodoAimbot do
                if CheckTarget(LocalPlayer) then
                    local CurrentVoodo = CheckPath(LocalPlayer, "PlayerGui", "MainGui", "Panels", "Stats", "ImageLabels", "SpellImage", "ImageButton")
                    local CheckVoodo = CheckPath(LocalPlayer, "PlayerGui", "MainGui", "Panels", "Stats", "Voodoo", "Slider")
                    if SelectVoodo == "Closest" and CheckVoodo and CurrentVoodo then
                        local Target = GetClosest(200, "HumanoidRootPart")
                        if CurrentVoodo.Image == "http://www.roblox.com/asset/?id=2022683074" then
                            if CheckVoodo.Size.X.Scale >= 0.900 then
                                if GetClosest(35) then
                                    if PlaceID == 11729688377 then
                                        Packets.VoodooSpell.send(GetEntityID(Target))
                                    elseif PlaceID == 11879754496 then
                                        Packets.VoodooSpell.send(GetEntityID(Target))
                                    end
                                end
                            end
                        elseif CurrentVoodo.Image == "rbxassetid://15887140246" then
                            if CheckVoodo.Size.X.Scale >= 0.750 then
                                if GetClosest(35) then
                                    if PlaceID == 11729688377 then
                                        Packets.VoodooSpell.send(GetEntityID(Target))
                                    elseif PlaceID == 11879754496 then
                                        Packets.VoodooSpell.send(GetEntityID(Target))
                                    end
                                end
                            end
                        end
                    elseif SelectVoodo == "Low HP" and CheckVoodo and CurrentVoodo then
                        for i,v in next, Players:GetPlayers() do
                            if v ~= LocalPlayer and CheckTarget(v) then
                                local Target = GetClosest(200, "HumanoidRootPart")
                                if CurrentVoodo.Image == "http://www.roblox.com/asset/?id=2022683074" then
                                    if CheckVoodo.Size.X.Scale >= 0.900 then --0.300
                                        if v.Character:FindFirstChild("Humanoid").Health <= VoodoHeal and Target then
                                            if PlaceID == 11729688377 then
                                                Packets.VoodooSpell.send(GetEntityID(Target))
                                            elseif PlaceID == 11879754496 then
                                                Packets.VoodooSpell.send(GetEntityID(Target))
                                            end
                                        end
                                    end
                                elseif CurrentVoodo.Image == "rbxassetid://15887140246" then
                                    if CheckVoodo.Size.X.Scale >= 0.750 then -- 0.750
                                        if v.Character:FindFirstChild("Humanoid").Health <= VoodoHeal and Target then
                                            if PlaceID == 11729688377 then
                                                Packets.VoodooSpell.send(GetEntityID(Target))
                                            elseif PlaceID == 11879754496 then
                                                Packets.VoodooSpell.send(GetEntityID(Target))
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                task.wait()
            end
        end)
    end
})

Fight:AddSlider({
    Name = "Shoot Target At",
    Min = 20,
    Max = 80,
    Default = 50,
    Color = Color3.fromRGB(166,0,255),
    Increment = 5,
    ValueName = "Health",
    Callback = function(Value)
        VoodoHeal = Value
    end 
})

Fight:AddDropdown({
    Name = "Target Priority",
    Default = "Low HP",
    Options = {"Low HP", "Closest"},
    Callback = function(Value)
        SelectVoodo = Value
    end 
})

local Section = Farm:AddSection({
    Name = "Pickup Section"
})

Utilities["Auto Pickup"] = Farm:AddToggle({
    Name = "Auto Pickup",
    Default = false,
    Callback = function(Value)
        Settings.Farm.AutoPickup = Value

        task.spawn(function()
            while Settings.Farm.AutoPickup do
                if CheckTarget(LocalPlayer) then
                    local RootPart = LocalPlayer.Character.HumanoidRootPart
                    local Params = OverlapParams.new()
                    Params.FilterDescendantsInstances = {LocalPlayer.Character}
                    Params.FilterType = Enum.RaycastFilterType.Exclude
                    if table.find(PickupType, "Items") then
                        for _, v in next, Workspace:GetPartBoundsInBox(RootPart.CFrame, Vector3.new(25,25,25), Params) do
                            if v ~= nil and not v:IsDescendantOf(LocalPlayer.Character) and not v:FindFirstChild('CookingSuite') then
                                if PlaceID == 11729688377 then
                                    if ((v:IsA("BasePart")) and (v:IsDescendantOf(Workspace.Items) or v:IsDescendantOf(Contents)) and GetEntityID(v)) then
                                        Packets.Pickup.send(GetEntityID(v)) -- definitive auto pickup (:
                                    end
                                elseif PlaceID == 11879754496 then
                                    if (v:IsA("BasePart") and (v:IsDescendantOf(Workspace.Items) or v:IsDescendantOf(Contents)) and GetEntityID(v)) then
                                        Packets.Pickup.send(GetEntityID(v))
                                    end
                                end
                            end
                        end
                    elseif table.find(PickupType, "Only Essence") then
                        for _, v in next, Workspace:GetPartBoundsInBox(RootPart.CFrame, Vector3.new(25,25,25), Params) do
                            if v:IsA('BasePart') and v.Name == 'Essence' and v:IsDescendantOf(Workspace.Items) and not v:IsDescendantOf(LocalPlayer.Character) then
                                if PlaceID == 11729688377 then
                                    Packets.Pickup.send(GetEntityID(v))
                                elseif PlaceID == 11879754496 then
                                    Packets.Pickup.send(v)
                                end
                            end
                        end
                    end
                    if Settings.Farm.PickupDelay <= 0 then
                        task.wait()
                    else
                        task.wait(Settings.Farm.PickupDelay)
                    end
                end
            end
        end)
    end
})

Utilities["Pickup Type"] = Farm:AddDropdown({
    Name = "Pickup Priority",
    Default = "Items",
    Multi = true,
    Options = {"Items", "Only Essence"},
    Callback = function(Value)
        PickupType = Value
    end
})

Utilities["Custom Pickup"] = Farm:AddToggle({
    Name = "Custom Auto Pickup",
    Default = false,
    Callback = function(Value)
        Settings.Farm.CustomAutoPickup = Value

        task.spawn(function()
            LPH_NO_VIRTUALIZE(function()
                while Settings.Farm.CustomAutoPickup do
                    for i,v in next, Workspace.Items:GetChildren() do
                        if CustomPickup ~= nil then
                            if v:IsA("BasePart") and table.find(CustomPickup, v.Name) then
                                if v ~= nil then
                                    local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
                                    if Distance <= 25 then
                                        if PlaceID == 11729688377 then
                                            Packets.Pickup.send(GetEntityID(v))
                                        elseif PlaceID == 11879754496 then
                                            Packets.Pickup.send(GetEntityID(v))
                                        end
                                    end
                                end
                            end
                        end
                    end
                    if Settings.Farm.PickupDelay <= 0 then
                        task.wait()
                    else
                        task.wait(Settings.Farm.PickupDelay)
                    end
                end
            end)()
        end)
    end
})

Utilities["Custom"] = Farm:AddDropdown({
    Name = "Choose Item",
    Default = "Raw Gold",
    Multi = true,
    Options = TableObject,
    Callback = function(Value)
        CustomPickup = Value
    end    
})

Farm:AddSlider({
    Name = "Auto Pickup Delay",
    Min = 0,
    Max = 30,
    Default = 1,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Seconds",
    Callback = function(Value)
        Settings.Farm.PickupDelay = Value
    end
})

local Section = Farm:AddSection({
    Name = "Gold Section"
})

if PlaceID == 11729688377 then
    Utilities["Gold Farm"] = Farm:AddToggle({
        Name = "Gold Farm",
        Default = false,
        Callback = function(Value)
            Settings.Farm.GoldFarm = Value

            if Settings.Farm.GoldFarm then
                Utilities["Anti Lag"]:Set(false)
                OrionLib:MakeNotification({Name = "Notify",Content = "Status: Tween Started",Image = "rbxassetid://7733658504",Time = 8})
                Connections["Gold Farm"] = RunService.Heartbeat:Connect(LPH_NO_VIRTUALIZE(function()
                    if CheckTarget(LocalPlayer) then
                        for i,v in next, Workspace.Items:GetChildren() do
                        if v.Name == "Ice Cube" then v:Destroy() end; end
                        local Inventory = CheckPath(LocalPlayer.PlayerGui, "MainGui", "RightPanel", "Inventory", "List")
                        local Bag = CheckPath(LocalPlayer.PlayerGui, "MainGui", "Panels", "Stats", "Bag")
                        local CapacityLimit = 0.99
                        if (Inventory and Inventory:FindFirstChild("Gold") and Inventory:FindFirstChild("Raw Gold") and Bag) then
                            if Bag.Slider.Size.X.Scale >= CapacityLimit then
                                Utilities["Gold Farm"]:Set(false)
                                OrionLib:MakeNotification({Name = "Notify",Content = "Full Bag: Gold Farm Has Been Disabled",Image = "rbxassetid://7733658504",Time = 8})
                            end
                            local GoldQuantity = Inventory["Gold"].QuantityImage.QuantityText.Text
                            local RawQuantity = Inventory["Raw Gold"].QuantityImage.QuantityText.Text
                            if GoldQuantity or RawQuantity then
                                if tonumber(GoldQuantity) >= tonumber(GoldCheck) or tonumber(RawQuantity) >= tonumber(GoldCheck) then
                                    Utilities["Gold Farm"]:Set(false)
                                    OrionLib:MakeNotification({Name = "Notify",Content = "Gold Farm Completed",Image = "rbxassetid://7733658504",Time = 8})
                                end
                            end
                        end
                        local Check = (Vector3.new(925, -3, -1390) - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                        if Check <= 70 then
                            local Chest = GetChest(70)
                            if not Chest then
                                Utilities["Gold Farm"]:Set(false)
                                local Message = "Chest Missing, please place a chest"
                                OrionLib:MakeNotification({Name = "Notify",Content = Message,Image = "rbxassetid://7733658504",Time = 8})
                            end
                            local Target = GetNode(70)
                            if Target then
                                local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - Target.Position).Magnitude
                                local TweenTime = Distance / 16
                                local CF = CFrame.new(Target.Position.X, Target.Position.Y, (Target.Position.Z - 5))
                                local TweenInfo = TweenInfo.new(TweenTime, Enum.EasingStyle.Linear)
                                Connections["Only Gold"] = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo, {CFrame = CF})
                                Connections["Only Gold"]:Play()
                                Connections["Only Gold"].Completed:wait()
                            end
                        else
                            Utilities["Gold Farm"]:Set(false)
                            OrionLib:MakeNotification({Name = "Notify",Content = "Get Closest At Gold Spot",Image = "rbxassetid://7733658504",Time = 8})
                        end
                    end
                end))
            elseif Connections["Gold Farm"] then
                Utilities["Coin Press"]:Set(false)
                Utilities["Custom Pickup"]:Set(false)
                Utilities["TP Raw"]:Set(false)
                Utilities["Auto Campire"]:Set(false)
                Utilities["Pickup Coins"]:Set(false)
                Utilities["Auto Eat"]:Set(false)
                Connections["Gold Farm"]:Disconnect()
                Connections["Gold Farm"] = nil
                if Connections["Ice Cube"] then
                    Connections["Ice Cube"]:Disconnect()
                    Connections["Ice Cube"] = nil
                end
                if Connections["Only Gold"] then
                    Connections["Only Gold"]:Cancel()
                    Connections["Only Gold"] = nil
                end
                OrionLib:MakeNotification({Name = "Notify",Content = "Status: Tween Stopped",Image = "rbxassetid://7733658504",Time = 8})
            end
        end
    })

    Farm:AddSlider({
        Name = "Gold Limit to Farm",
        Min = 1,
        Max = 5000,
        Default = 500,
        Color = Color3.fromRGB(166,0,255),
        Increment = 5,
        ValueName = "Gold Capacity",
        Callback = function(Value)
            GoldCheck = Value
        end
    })
end

if PlaceID == 11729688377 then
    Utilities["Pickup Coins"] = Farm:AddToggle({
        Name = "Auto Pickup Coins",
        Default = false,
        Callback = function(Value)
            Settings.Farm.Coin = Value

            task.spawn(function()
                LPH_NO_VIRTUALIZE(function()
                    while Settings.Farm.Coin do
                        if CheckTarget(LocalPlayer) then
                            for _, v in next, Workspace.Items:GetChildren() do
                                if v.Name == 'Coin2' and v:IsA('BasePart') then
                                    if v ~= nil then
                                        local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
                                        if Distance <= 25 then
                                            Packets.Pickup.send(GetEntityID(v))
                                        end
                                    end
                                end
                            end
                        end
                        task.wait()
                    end
                end)()
            end)
        end
    })
end

Utilities["TP Raw"] = Farm:AddToggle({
    Name = "TP Raw Gold to Chest",
    Default = false,
    Callback = function(Value)
        Settings.Farm.TPObject = Value

        task.spawn(function()
            LPH_NO_VIRTUALIZE(function()
                if Settings.Farm.TPObject then
                    Connections["TP Items"] = Workspace.Items.ChildAdded:Connect(function(ins)
                        local Target = GetChest(100)
                        if Target and ins.Name == "Raw Gold" and ins:IsA("BasePart") then
                            ins.CFrame = CFrame.new(Target.Position)
                        end
                    end)
                elseif Connections["TP Items"] then
                    Connections["TP Items"]:Disconnect()
                    Connections["TP Items"] = nil
                end
            end)()
        end)
    end
})

Utilities["Coin Press"] = Farm:AddToggle({
    Name = "Auto Coin Press",
    Default = false,
    Callback = function(Value)
        Settings.Farm.AutoCoin = Value

        task.spawn(function()
            LPH_NO_VIRTUALIZE(function()
                while Settings.Farm.AutoCoin do
                    if CheckTarget(LocalPlayer) then
                        for _, v in pairs(Workspace.Deployables:GetChildren()) do
                            if v.Name == 'Coin Press' and v:IsA('Model') then
                                local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
                                if Distance <= 25 then
                                    if PlaceID == 11729688377 then
                                        Packets.InteractStructure.send({entityID = GetEntityID(v), itemID = 597})
                                    elseif PlaceID == 11879754496 then
                                        Packets.InteractStructure.send({entityID = GetEntityID(v), itemID = 597})
                                    end
                                end
                            end
                        end
                    end
                    task.wait()
                end
            end)()
        end)
    end
})

Utilities["Auto Campire"] = Farm:AddToggle({
    Name = "Auto Campire",
    Default = false,
    Callback = function(Value)
        Settings.Farm.AutoCampire = Value

        task.spawn(function()
            LPH_NO_VIRTUALIZE(function()
                while Settings.Farm.AutoCampire do
                    if CheckTarget(LocalPlayer) then
                        for i,v in pairs(Workspace.Deployables:GetChildren()) do
                            if v:IsA('Model') and v.Name == 'Campfire' then
                                local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
                                if Distance <= 25 then
                                    for _, c in next, Fuel do
                                        if PlaceID == 11729688377 then
                                            Packets.InteractStructure.send({entityID = GetEntityID(v), itemID = table.find(ItemID, c)})
                                        elseif PlaceID == 11879754496 then
                                            Packets.InteractStructure.send({entityID = GetEntityID(v), itemID = table.find(ItemID, c)})
                                        end
                                    end
                                end
                            end
                        end
                    end
                    if Settings.Farm.DelayC <= 0 then
                        task.wait()
                    else
                        task.wait(Settings.Farm.DelayC)
                    end
                end
            end)()
        end)
    end
})

Farm:AddSlider({
    Name = "Auto Campire Delay",
    Min = 0,
    Max = 30,
    Default = 1,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Seconds",
    Callback = function(Value)
        Settings.Farm.DelayC = Value
    end
})

Farm:AddDropdown({
    Name = "Select Resource",
    Default = "Leaves",
    Multi = true,
    Options = {"Leaves", "Log", "Wood", "Coal"},
    Callback = function(Value)
        Fuel = Value
    end
})

Utilities["Auto Drop"] = Farm:AddToggle({
    Name = "Auto Drop",
    Default = false,
    Callback = function(Value)
        Settings.Farm.AutoDrop = Value

        if Settings.Farm.AutoDrop then
            task.spawn(function()
                LPH_NO_VIRTUALIZE(function()
                    while Settings.Farm.AutoDrop do
                        if CheckTarget(LocalPlayer) then
                            for _, v in next, DropSelectItem do
                                local Inventory = CheckPath(PlayerGui, "MainGui", "RightPanel", "Inventory", "List")
                                if ((v ~= nil and typeof(v) == "string") and Inventory ~= nil) then
                                    local CurrentItem = Inventory:FindFirstChild(v)
                                    if CurrentItem then
                                        if PlaceID == 11729688377 then
                                            for i = 1, 2 do
                                                Packets.DropBagItem.send(CurrentItem.LayoutOrder)
                                            end
                                        elseif PlaceID == 11879754496 then
                                            for i = 1, 2 do
                                                Events.DropBagItem.send(CurrentItem.LayoutOrder)
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        task.wait()
                    end
                end)()
            end)
        end
    end    
})

Farm:AddDropdown({
    Name = "Select Item",
    Default = "Log",
    Multi = true,
    Options = ALL,
    Callback = function(Value)
        DropSelectItem = Value
    end
})

local Section = Farm:AddSection({
    Name = "Food Section"
})

Utilities["Auto Eat"] = Farm:AddToggle({
    Name = "Auto Eat",
    Default = false,
    Callback = function(Value)
        Settings.Farm.AutoFood = Value

        if Settings.Farm.AutoFood then
            task.spawn(LPH_NO_VIRTUALIZE(function()
                while Settings.Farm.AutoFood do
                    local PlayerGui = LocalPlayer:FindFirstChild("PlayerGui")
                    if CheckTarget(LocalPlayer) and PlayerGui then
                        local FoodSlider = CheckPath(PlayerGui, "MainGui", "Panels", "Stats", "Food", "Slider")
                        local Inventory = CheckPath(PlayerGui, "MainGui", "RightPanel", "Inventory", "List")
                        if FoodSlider ~= nil and Inventory ~= nil then
                            if ((SelectFood ~= nil and typeof(SelectFood) == "string") and Inventory:FindFirstChild(SelectFood)) then
                                local HungerValue = FoodSlider.Size.X.Scale * 100
                                if HungerValue <= SFV then
                                    repeat
                                        if Settings.Farm.FDelay <= 0 then
                                            task.wait()
                                        else
                                            task.wait(Settings.Farm.FDelay)
                                        end
                                        local CheckHunger = FoodSlider.Size.X.Scale * 100
                                        if PlaceID == 11729688377 and Inventory:FindFirstChild(SelectFood) then
                                            Packets.UseBagItem.send(Inventory[SelectFood].LayoutOrder)
                                        elseif PlaceID == 11879754496 and Inventory:FindFirstChild(SelectFood) then
                                            Packets.UseBagItem.send(Inventory[SelectFood].LayoutOrder)
                                        else
                                            OrionLib:MakeNotification({Name = "Notify",Content = "Missing Food: "..SelectFood,Image = "rbxassetid://7733658504",Time = 8})
                                            break
                                        end
                                    until CheckHunger >= 99
                                end
                            end
                        else
                            OrionLib:MakeNotification({Name = "Notify",Content = "Failed to Find Patch",Image = "rbxassetid://7733658504",Time = 8})
                            Utilities["Auto Eat"]:Set(false)
                        end
                    end
                    task.wait()
                end
            end))
        end
    end
})

Farm:AddSlider({
    Name = "Eat At",
    Min = 1,
    Max = 90,
    Default = 40,
    Color = Color3.fromRGB(166,0,255),
    Increment = 5,
    ValueName = "Food Bar",
    Callback = function(Value)
        SFV = Value
    end
})

Farm:AddDropdown({
    Name = "Select Food",
    Default = "Bloodfruit",
    Options = TableFood,
    Callback = function(Value)
        SelectFood = Value
    end
})

Farm:AddSlider({
    Name = "Auto Eat Delay",
    Min = 0,
    Max = 10,
    Default = 1,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Seconds",
    Callback = function(Value)
        Settings.Farm.FDelay = Value
    end
})

local Section = Farm:AddSection({
    Name = "Plant Box Section"
})

Utilities["Plant Box"] = Farm:AddToggle({
    Name = "Place Plant Box",
    Default = false,
    Callback = function(Value)
        Settings.Farm.PlacePlantBox = Value

        if Settings.Farm.PlacePlantBox then
            if CheckTarget(LocalPlayer) then
                local RootPos = LocalPlayer.Character.HumanoidRootPart.Position
                local Size = 8
                local Structure = Vector3.new(6, 1.6, 6)
                local Counting = 0
                if PMethod == "Stacked" then
                    for row = 1, Size do
                        for col = 1, Size do
                            local xOffset = (col - math.floor(Size / 2)) * (Structure.X - 1)
                            local zOffset = (row - math.floor(Size / 2)) * (Structure.Z - 1)
                            local CalculatedPos = Vector3.new(RootPos.X + xOffset, RootPos.Y - 3, RootPos.Z + zOffset)

                            Packets.PlaceStructure.send({buildingName = "Plant Box", yrot = 40, vec = CalculatedPos, isMobile = false})
                            task.wait(0.4)
                            if not Settings.Farm.PlacePlantBox then
                                break
                            end
                            if Counting >= 63 then
                                Utilities["Plant Box"]:Set(false)
                                OrionLib:MakeNotification({Name = "Notify",Content = "Success",Image = "rbxassetid://7733658504",Time = 8})
                                Counting = 0
                            end
                            Counting = Counting + 1
                            task.wait(0.4)
                        end
                        if not Settings.Farm.PlacePlantBox then
                            break
                        end
                    end
                elseif PMethod == "Square" then
                    for row = 1, Size do
                        for col = 1, Size do
                            local xOffset = (col - math.floor(Size / 2)) * (Structure.X + 1)
                            local zOffset = (row - math.floor(Size / 2)) * (Structure.Z + 1)
                            local CalculatedPos = Vector3.new(RootPos.X + xOffset, RootPos.Y - 3, RootPos.Z + zOffset)
                            Packets.PlaceStructure.send({buildingName = "Plant Box", yrot = 0, vec = CalculatedPos, isMobile = false})
                            if not Settings.Farm.PlacePlantBox then
                                break
                            end
                            if Counting >= 63 then
                                Utilities["Plant Box"]:Set(false)
                                OrionLib:MakeNotification({Name = "Notify",Content = "Success",Image = "rbxassetid://7733658504",Time = 8})
                                Counting = 0
                            end
                            task.wait(0.4)
                            Counting = Counting + 1 --80
                        end
                        if not Settings.Farm.PlacePlantBox then
                            break
                        end
                    end
                end
            end
        end
    end
})

Farm:AddDropdown({
    Name = "Place Method",
    Default = "Square",
    Options = {"Square", "Stacked"},
    Callback = function(Value)
        PMethod = Value
    end
})

Farm:AddToggle({
    Name = "Auto Harvest",
    Default = false,
    Callback = function(Value)
        Settings.Farm.AutoHarvest = Value

        task.spawn(LPH_NO_VIRTUALIZE(function()
            while Settings.Farm.AutoHarvest do
                if CheckTarget(LocalPlayer) then
                    for i,v in next, Workspace:GetChildren() do
                        if v:IsA("Model") and v.PrimaryPart ~= nil then
                            local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
                            if Distance <= 25 then
                                if PlaceID == 11729688377 then
                                    Packets.Pickup.send(GetEntityID(v))
                                elseif PlaceID == 11879754496 then
                                    Packets.Pickup.send(GetEntityID(v))
                                end
                            end
                        elseif v:IsA("BasePart") and v ~= nil then  --definitive version of auto harvest (;
                            local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
                            if Distance <= 25 then
                                if PlaceID == 11729688377 then
                                    Packets.Pickup.send(GetEntityID(v))
                                elseif PlaceID == 11879754496 then
                                    Packets.Pickup.send(GetEntityID(v))
                                end
                            end
                        end
                    end
                end
                task.wait()
            end
        end))
    end
})

Utilities["Auto Plant"] = Farm:AddToggle({
    Name = "Auto Plant",
    Default = false,
    Callback = function(Value)
        Settings.Farm.AutoPlant = Value

        if Settings.Farm.AutoPlant then
            while Settings.Farm.AutoPlant do
                if CheckTarget(LocalPlayer) then
                    local Params = OverlapParams.new()
                    Params.FilterDescendantsInstances = {LocalPlayer.Character}
                    Params.FilterType = Enum.RaycastFilterType.Exclude
                    if PlaceID == 11729688377 then
                        for _, v in next, Workspace:GetPartBoundsInBox(LocalPlayer.Character.HumanoidRootPart.CFrame, Vector3.new(5,15,5), Params) do
                            if v.Parent ~= nil then
                                if (tostring(v.Parent) == "Plant Box" and not v.Parent:FindFirstChild("Seed")) then
                                    local distance = (v.Parent:FindFirstChildWhichIsA("BasePart").Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                                    if distance < 10 then
                                        Packets.InteractStructure.send({entityID = GetEntityID(v.Parent), itemID = ItemID[SelectPlant]})
                                    end
                                end
                            end
                        end
                    elseif PlaceID == 11879754496 then
                        for _, v in next, Workspace:GetPartBoundsInBox(LocalPlayer.Character.HumanoidRootPart.CFrame, Vector3.new(15,15,15), Params) do
                            if v.Parent ~= nil then
                                if (tostring(v.Parent) == "Plant Box" and not v.Parent:FindFirstChild("Seed")) then
                                    Packets.InteractStructure.send({entityID = GetEntityID(v.Parent), itemID = ItemID[SelectPlant]})
                                end
                            end
                        end
                    end
                end
                task.wait()
            end
        end
    end
})

Farm:AddDropdown({
    Name = "Choose Plant",
    Default = "Bloodfruit",
    Options = TableFood,
    Callback = function(Value)
        SelectPlant = Value
    end
})

Utilities["Tweening"] = Farm:AddToggle({
    Name = 'Start Tweening',
    Default = false,
    Callback = function(Value)
        Settings.Farm.FTween = Value

        if Settings.Farm.FTween then
            OrionLib:MakeNotification({Name = "Notify",Content = "Status: Tween Started",Image = "rbxassetid://7733658504",Time = 8})
            Connections["Tween"] = RunService.RenderStepped:Connect(LPH_NO_VIRTUALIZE(function()
                if CheckTarget(LocalPlayer) then
                    if Settings.Farm.Method == "Tween" then
                        for _, v in next, Workspace.Deployables:GetChildren() do
                            if v:IsA("Model") and v.Name == "Plant Box" and v.PrimaryPart ~= nil then
                                local Distance = (v.PrimaryPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                                if Distance <= Settings.Farm.RangeTween and not v:FindFirstChild("Seed") then
                                    local RootPart = LocalPlayer.Character.HumanoidRootPart
                                    local PosZ = RootPart.Positon.Z
                                    local DirectionZ = RootPart.CFrame.LookVector.Z
                                    local CurrentDistance = (LocalPlayer.Character.HumanoidRootPart.Position - TargetPos).Magnitude
                                    local TweenTime = CurrentDistance / Settings.Farm.TweenSpeed
                                    local Calculate = nil
                                    local MovedRight = false
                                    if MovedRight == false then
                                        local Calculate = CFrame.new(5, RootPart.Position.Y + 5, PosZ + DirectionZ)
                                        MovedRight = true
                                    elseif MovedRight then
                                        local Calculate = CFrame.new(-5, RootPart.Position.Y + 5, PosZ + DirectionZ)
                                        MovedRight = false
                                    end
                                    local TweenInfo = TweenInfo.new(TweenTime, Enum.EasingStyle.Linear)
                                    Connections["Plant Box"] = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo, {CFrame = Calculate})
                                    Connections["Plant Box"]:Play()
                                end
                            end
                        end
                    elseif Settings.Farm.Method == "Walk" then
                        local LockC = LocalPlayer.PlayerGui.MainGui.RightPanel.SettingsUI.List:GetChildren()[5].Switch
                        local Active = false
                        if not Active and not LockC.BackgroundColor3 == Color3.fromRGB(255,0,0) then
                        for i,v in next, getconnections(LockC.Activated) do v:Fire(); Active = true end; end
                        for _, v in next, Workspace.Deployables:GetChildren() do
                            if v:IsA("Model") and v.Name == "Plant Box" and v.PrimaryPart ~= nil then
                                local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
                                if Distance <= Settings.Farm.RangeTween and not v:FindFirstChild("Seed") then
                                    local LockC = LocalPlayer.PlayerGui.MainGui.RightPanel.SettingsUI.List:GetChildren()[5].Switch
                                    if LockC.BackgroundColor3 == Color3.fromRGB(170, 255, 0) then
                                    for i,v in next, getconnections(LockC.Activated) do v:Fire() end; end
                                    LocalPlayer.Character.Humanoid:MoveTo(v.PrimaryPart.Position)
                                    LocalPlayer.Character.Humanoid.MoveToFinished:Wait()
                                end
                            end
                        end
                    end
                end
            end))
        elseif Connections["Tween"] then
            local LockC = LocalPlayer.PlayerGui.MainGui.RightPanel.SettingsUI.List:GetChildren()[5].Switch
            if LockC.BackgroundColor3 == Color3.fromRGB(255,0,0) then
            for i,v in next, getconnections(LockC.Activated) do v:Fire() end; end
            Connections["Tween"]:Disconnect()
            Connections["Tween"] = nil
            if Connections["Plant Box"] then
                Connections["Plant Box"]:Cancel()
                Connections["Plant Box"] = nil
            end
            OrionLib:MakeNotification({Name = "Notify",Content = "Status: Tween Stopped",Image = "rbxassetid://7733658504",Time = 8})
        end
    end
})

local Section = Farm:AddSection({
    Name = "Settings Section"
})

Farm:AddSlider({
    Name = "Tween Range",
    Min = 1,
    Max = 3000,
    Default = 50,
    Color = Color3.fromRGB(166,0,255),
    Increment = 5,
    ValueName = "Range",
    Callback = function(Value)
        Settings.Farm.RangeTween = Value
    end
})

Farm:AddSlider({
    Name = "Tween Speed",
    Min = 1,
    Max = 30,
    Default = 16,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Speed",
    Callback = function(Value)
        Settings.Farm.TweenSpeed = Value
    end    
})

Farm:AddDropdown({
    Name = "Choose Method",
    Default = "Tween",
    Options = {"Tween", "Walk"},
    Callback = function(Value)
        Settings.Farm.Method = Value
    end
})

local Section = Farm:AddSection({
    Name = "Custom Tween Section"
})

Utilities["Custom Tween"] = Farm:AddToggle({
	Name = "Start Tweening",
	Default = false,
	Callback = function(Value)
        Settings.Farm.CustomTween = Value

        if Settings.Farm.CustomTween then
            OrionLib:MakeNotification({Name = "Notify",Content = "Status: Tween Started",Image = "rbxassetid://7733658504",Time = 8})
            while Settings.Farm.CustomTween do
                if CheckTarget(LocalPlayer) then
                    if #SavedPos <= 1 then
                        OrionLib:MakeNotification({Name = "Notify",Content = "Add At Least Two Positions",Image = "rbxassetid://7733658504",Time = 8})
                        Utilities["Custom Tween"]:Set(false)
                    end
                    for _, v in next, SavedPos do
                        if v and typeof(v) == "Vector3" then
                            if Settings.Farm.Method == "Tween" then
                                local CurrentDistance = (LocalPlayer.Character.HumanoidRootPart.Position - v).Magnitude
                                local TweenTime = CurrentDistance / Settings.Farm.CustomSpeed
                                local CF = CFrame.new(v)
                                local TweenInfo = TweenInfo.new(TweenTime, Enum.EasingStyle.Linear)
                                Connections["Custom"] = TweenService:Create(LocalPlayer.Character.HumanoidRootPart, TweenInfo, {CFrame = CF})
                                Connections["Custom"]:Play()
                                Connections["Custom"].Completed:Wait()
                                task.wait(Settings.Farm.DelayTween)
                            elseif Settings.Farm.Method == "Walk" then
                                local LockC = LocalPlayer.PlayerGui.MainGui.RightPanel.SettingsUI.List:GetChildren()[5].Switch
                                if LockC.BackgroundColor3 == Color3.fromRGB(170, 255, 0) then
                                    for i,v in next, getconnections(LockC.Activated) do
                                        v:Fire()
                                    end
                                end
                                LocalPlayer.Character.Humanoid:MoveTo(v)
                                LocalPlayer.Character.Humanoid.MoveToFinished:Wait()
                                task.wait(Settings.Farm.DelayTween)
                            end
                        end
                    end
                end
                task.wait()
            end
        elseif Connections["Custom"] then
            local LockC = LocalPlayer.PlayerGui.MainGui.RightPanel.SettingsUI.List:GetChildren()[5].Switch
            if LockC.BackgroundColor3 == Color3.fromRGB(255,0,0) then
                for i,v in next, getconnections(LockC.Activated) do
                    v:Fire()
                end
            end
            Connections["Custom"]:Cancel()
            Connections["Custom"] = nil
            OrionLib:MakeNotification({Name = "Notify",Content = "Status: Tween Stopped",Image = "rbxassetid://7733658504",Time = 8})
        end
	end
})

Farm:AddButton({
	Name = "Remove Last Tween Position",
	Callback = function()
        table.remove(SavedPos, Count)
        Count = Count - 1
        OrionLib:MakeNotification({Name = "Notify",Content = "Count Position: " .. Count,Image = "rbxassetid://7733658504",Time = 8})
  	end
})

Farm:AddButton({
	Name = "Add Tween Positon",
	Callback = function()
        if CheckTarget(LocalPlayer) then
            table.insert(SavedPos, LocalPlayer.Character.HumanoidRootPart.Position)
            Count = Count + 1
            OrionLib:MakeNotification({Name = "Notify",Content = "Count Position: " .. Count,Image = "rbxassetid://7733658504",Time = 8})
        end
  	end
})

Farm:AddButton({
	Name = "Clear All Tween Position",
	Callback = function()
        Count = 0
        OrionLib:MakeNotification({Name = "Notify",Content = "All Positions Have Been Removed",Image = "rbxassetid://7733658504",Time = 8})
        table.clear(SavedPos)
  	end
})

Farm:AddSlider({
    Name = "Wait Time to Next Position",
    Min = 1,
    Max = 10,
    Default = 1,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Seconds",
    Callback = function(Value)
        Settings.Farm.DelayTween = Value
    end
})

Farm:AddSlider({
    Name = "Tween Speed",
    Min = 1,
    Max = 30,
    Default = 16,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Speed",
    Callback = function(Value)
        Settings.Farm.CustomSpeed = Value
    end
})

local Section = Visual:AddSection({
    Name = "Client Section"
})

if PlaceID == 11729688377 then
    Visual:AddButton({
        Name = "Tp To Void",
        Callback = function()
            TeleportService:Teleport(11879754496)
        end
    })
elseif PlaceID == 11879754496 then
    Visual:AddButton({
        Name = "Tp To OverWorld",
        Callback = function()
            TeleportService:Teleport(11729688377)
        end
    })
end

Visual:AddToggle({
    Name = "Field Of View",
    Callback = function(Value)
        Settings.Visual.FieldOfView = Value

        if Settings.Visual.FieldOfView then
            task.spawn(LPH_NO_VIRTUALIZE(function()
                Connections["FieldOfView"] = RunService.RenderStepped:Connect(LPH_NO_VIRTUALIZE(function()
                    if CheckTarget(LocalPlayer) then
                        Camera.FieldOfView = Settings.Visual.SelectFOV
                    end
                end))
            end))
        elseif Connections["FieldOfView"] then
            Connections["FieldOfView"]:Disconnect()
            Connections["FieldOfView"] = nil
            Camera.FieldOfView = 65
        end
    end
})

Visual:AddSlider({
    Name = "FOV",
    Min = 70,
    Max = 120,
    Default = 70,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Value",
    Callback = function(Value)
        Settings.Visual.SelectFOV = Value
    end
})

Visual:AddToggle({
    Name = "Max Slope Angle",
    Callback = function(Value)
        Settings.Visual.Angle = Value

        task.spawn(LPH_NO_VIRTUALIZE(function()
            if Settings.Visual.Angle then
                while Settings.Visual.Angle do
                    if CheckTarget(LocalPlayer) then
                        LocalPlayer.Character.Humanoid.MaxSlopeAngle = Settings.Visual.Anglev
                    end
                    task.wait()
                end
            else
                LocalPlayer.Character.Humanoid.MaxSlopeAngle = 45
            end
        end))
    end
})

Visual:AddSlider({
    Name = "Choose Angle",
    Min = 0,
    Max = 89,
    Default = 30,
    Color = Color3.fromRGB(166,0,255),
    Increment = 5,
    ValueName = "Angle",
    Callback = function(Value)
        Settings.Visual.Anglev = Value
    end
})
--[[
if PlaceID == 11729688377 then
    Fight:AddColorpicker({
        Name = 'Projectile Tracer',
        Default = Color3.new(255, 255, 255),
        Callback = function(Value)
            if ReplicatedStorage.Modules:FindFirstChild("SecureCast") then
                ReplicatedStorage.Modules.SecureCast.Projectiles.Arrow.Trail.Color = ColorSequence.new(Value)
            else
                ReplicatedStorage.Projectiles.Arrow.Trail.Color = ColorSequence.new(Value)
            end
        end
    })
    Fight:AddColorpicker({
        Name = 'Projectile Color',
        Default = Color3.new(255, 255, 255),
        Callback = function(Value)
            if ReplicatedStorage.Modules:FindFirstChild("SecureCast") then
                ReplicatedStorage.Modules.SecureCast.Projectiles.Arrow.Color = Value
            else
                ReplicatedStorage.Projectiles.Arrow.Color = Value
            end
        end
    })
elseif PlaceID == 11879754496 then
    Fight:AddColorpicker({
        Name = 'Projectile Color',
        Default = Color3.new(255, 255, 255),
        Callback = function(Value)
            ReplicatedStorage.Projectiles.Arrow.Trail.Color = ColorSequence.new(Value)
        end
    })
    Fight:AddColorpicker({
        Name = 'Projectile Color',
        Default = Color3.new(255, 255, 255),
        Callback = function(Value)
            ReplicatedStorage.Projectiles.Arrow.Color = Value
        end
    })
end]]--

local Section = Visual:AddSection({
    Name = "World Section"
})

Visual:AddToggle({
    Name = "Player Name",
    Callback = function(Value)
        Settings.Visual.Name = Value

        if Settings.Visual.Name then
            task.spawn(function()
                while Settings.Visual.Name do
                    if CheckTarget(LocalPlayer) then
                        for i,v in next, Players:GetPlayers() do
                            if v ~= LocalPlayer then
                                if TargetCheck(v) and v.Character:FindFirstChild("Head") then
                                    local Head = v.Character.Head
                                    local Part = v.Character:FindFirstChild("Humanoid")
                                    local Distance = (v.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                                    if Distance <= Settings.Visual.Range then
                                        local OFFSET = Settings.Visual.OFFSET
                                        local ScreenPos, OnScreen = Camera:WorldToViewportPoint(Head.Position + Vector3.new(0, OFFSET, 0))
                                        if OnScreen then
                                            if not PlayerTable.Names[v] then
                                                local Draw = CreateText()
                                                PlayerTable.Names[v] = {Text = Draw, Humanoid = Part}
                                            end
                                            if Settings.Visual.Armor then
                                                if v.Character:FindFirstChild("God Chestplate") then
                                                    PlayerTable.Names[v].Text.Text = v.Name .." | ".. math.round(Distance) .. "\n" .. "[Armor: God]"
                                                elseif v.Character:FindFirstChild("Magnetite Chestplate") then
                                                    PlayerTable.Names[v].Text.Text = v.Name .." | ".. math.round(Distance) .. "\n" .. "[Armor: Magnetite]"
                                                elseif v.Character:FindFirstChild("Emerald Chestplate") then
                                                    PlayerTable.Names[v].Text.Text = v.Name .." | ".. math.round(Distance) .. "\n" .. "[Armor: Emerald]"
                                                elseif v.Character:FindFirstChild("Adurite Chestplate") then
                                                    PlayerTable.Names[v].Text.Text = v.Name .." | ".. math.round(Distance) .. "\n" .. "[Armor: Adurite]"
                                                elseif v.Character:FindFirstChild("Crystal Chestplate") then
                                                    PlayerTable.Names[v].Text.Text = v.Name .." | ".. math.round(Distance) .. "\n" .. "[Armor: Crystal]"
                                                elseif v.Character:FindFirstChild("Void Chestplate") then
                                                    PlayerTable.Names[v].Text.Text = v.Name .." | ".. math.round(Distance) .. "\n" .. '[Armor: Void]'
                                                elseif v.Character:FindFirstChild("Iron Chestplate") then
                                                    PlayerTable.Names[v].Text.Text = v.Name .." | ".. math.round(Distance) .. "\n" .. '[Armor: Iron]'
                                                elseif v.Character:FindFirstChild("Steel Chestplate") then
                                                    PlayerTable.Names[v].Text.Text = v.Name .." | ".. math.round(Distance) .. "\n" .. '[Armor: Steel]'
                                                elseif v.Character:FindFirstChild("Pink Diamond Chestplate") then
                                                    PlayerTable.Names[v].Text.Text = v.Name .." | ".. math.round(Distance) .. "\n" .. "[Armor: Pink Diamond]"
                                                else
                                                    PlayerTable.Names[v].Text.Text = v.Name .." | ".. math.round(Distance) .. "\n" .. "[Armor: No Armor]"
                                                end
                                            else
                                                PlayerTable.Names[v].Text.Text = v.Name .." | ".. math.round(Distance)
                                            end
                                            PlayerTable.Names[v].Text.Color = v.TeamColor.Color
                                            PlayerTable.Names[v].Text.Size = Settings.Visual.Size
                                            PlayerTable.Names[v].Text.Visible = true
                                            PlayerTable.Names[v].Text.Font = Drawing.Fonts[tostring(Settings.Visual.Font)]
                                            PlayerTable.Names[v].Text.Position = Vector2.new(ScreenPos.X, ScreenPos.Y)
                                        elseif PlayerTable.Names[v] then
                                            PlayerTable.Names[v].Text.Visible = false
                                        end
                                    elseif PlayerTable.Names[v] then
                                        PlayerTable.Names[v].Text.Visible = false
                                    end
                                end
                            end
                        end
                        for i,v in next, PlayerTable.Names do
                            if v.Humanoid and v.Humanoid.Health <= 0 or not v.Humanoid.Parent.Parent then
                                v.Text:Remove()
                                PlayerTable.Names[i] = nil
                            end
                        end
                    end
                    task.wait()
                end
            end)
        else
            for i,v in next, PlayerTable.Names do
                v.Text:Remove()
                PlayerTable.Names[i] = nil
            end
        end
    end
})

Visual:AddToggle({
    Name = "Player Chams",
    Callback = function(Value)
        Settings.Visual.Chams = Value

        if Settings.Visual.Chams then
            task.spawn(function()
                while Settings.Visual.Chams do
                    if CheckTarget(LocalPlayer) then
                        for i,v in next, Players:GetPlayers() do
                            if v ~= LocalPlayer and TargetCheck(v) and CheckPath(v.Character, "Head") then
                                local Head = v.Character.Head
                                local Part = v.Character:FindFirstChild("Humanoid")
                                local Distance = (v.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                                if Distance <= Settings.Visual.Range then
                                    if not PlayerTable.Chams[v] then
                                        local Create = Instance.new("BoxHandleAdornment", StorageFolder)
                                        Create.Adornee = v.Character
                                        Create.ZIndex = 0
                                        Create.AlwaysOnTop = true
                                        PlayerTable.Chams[v] = {Draw = Create, Humanoid = v.Character.Humanoid}
                                    end
                                    PlayerTable.Chams[v].Draw.Size = v.Character.HumanoidRootPart.Size
                                    PlayerTable.Chams[v].Draw.Color = v.TeamColor
                                elseif PlayerTable.Chams[v] then
                                    PlayerTable.Chams[v].Draw.Transparency = 1
                                end
                            elseif PlayerTable.Chams[v] then
                                PlayerTable.Chams[v].Draw.Transparency = 1
                            end
                        end
                        for i,v in next, PlayerTable.Chams do
                            if v.Humanoid and v.Humanoid.Health <= 0 or not v.Humanoid.Parent.Parent then
                                v.Draw:Destroy()
                                PlayerTable.Chams[i] = nil
                            end
                        end
                    end
                    task.wait()
                end
            end)
        else
            for i,v in next, PlayerTable.Chams do
                v.Draw:Destroy()
                PlayerTable.Chams[i] = nil
            end
        end
    end
})


Visual:AddToggle({
    Name = "Player Boxes",
    Callback = function(Value)
        Settings.Visual.Box = Value -- add here to disable esp

        if Settings.Visual.Box then
            task.spawn(function()
                while Settings.Visual.Box do
                    if CheckTarget(LocalPlayer) then
                        for i,v in next, Players:GetPlayers() do
                            if v ~= LocalPlayer then
                                if TargetCheck(v) then
                                    local Part = v.Character:FindFirstChild("Humanoid")
                                    local Distance = (v.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                                    if Distance <= Settings.Visual.Range then
                                        local OFFSET = Settings.Visual.OFFSET
                                        local ScreenPos, OnScreen = Camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                                        if OnScreen then
                                            if not PlayerTable.Boxes[v] then
                                                PlayerTable.Boxes[v] = {Box1 = CreateQuad(), Box2 = CreateQuad(), Humanoid = Part}
                                            end
                                            local RightVector = v.Character.HumanoidRootPart.CFrame.RightVector
                                            local UpVector = v.Character.HumanoidRootPart.CFrame.UpVector
                                            local CF = v.Character.HumanoidRootPart.CFrame.Position
                                            PlayerTable.Boxes[v].Box1.Visible = true
                                            PlayerTable.Boxes[v].Box1.PointA = Vector2.new(Camera:WorldToViewportPoint(CF + RightVector *-BoxWidth2 + UpVector * BoxHeight1).X,
                                            Camera:WorldToViewportPoint(CF + RightVector *-BoxWidth2 + UpVector * BoxHeight1).Y)
                                            PlayerTable.Boxes[v].Box1.PointB = Vector2.new(Camera:WorldToViewportPoint(CF + RightVector * BoxWidth1 + UpVector * BoxHeight1).X,
                                            Camera:WorldToViewportPoint(CF + RightVector * BoxWidth1 + UpVector * BoxHeight1).Y)
                                            PlayerTable.Boxes[v].Box1.PointC = Vector2.new(Camera:WorldToViewportPoint(CF + RightVector * BoxWidth1 + UpVector * -BoxHeight2).X,
                                            Camera:WorldToViewportPoint(CF + RightVector * BoxWidth1 + UpVector * -BoxHeight2).Y)
                                            PlayerTable.Boxes[v].Box1.PointD = Vector2.new(Camera:WorldToViewportPoint(CF + RightVector *-BoxWidth2 + UpVector * -BoxHeight2).X,
                                            Camera:WorldToViewportPoint(CF + RightVector *-BoxWidth2 + UpVector * -BoxHeight2).Y)
                
                                            PlayerTable.Boxes[v].Box2.Visible = true
                                            PlayerTable.Boxes[v].Box2.PointA = Vector2.new(Camera:WorldToViewportPoint(CF + RightVector *-BoxWidth2 + UpVector * BoxHeight1).X,
                                            Camera:WorldToViewportPoint(CF + RightVector *-BoxWidth2 + UpVector * BoxHeight1).Y)  
                                            PlayerTable.Boxes[v].Box2.PointB = Vector2.new(Camera:WorldToViewportPoint(CF + RightVector * BoxWidth1 + UpVector * BoxHeight1).X,
                                            Camera:WorldToViewportPoint(CF + RightVector * BoxWidth1 + UpVector * BoxHeight1).Y)
                                            PlayerTable.Boxes[v].Box2.PointC = Vector2.new(Camera:WorldToViewportPoint(CF + RightVector * BoxWidth1 + UpVector * -BoxHeight2).X,
                                            Camera:WorldToViewportPoint(CF + RightVector * BoxWidth1 + UpVector * -BoxHeight2).Y)  
                                            PlayerTable.Boxes[v].Box2.PointD = Vector2.new(Camera:WorldToViewportPoint(CF + RightVector *-BoxWidth2 + UpVector * -BoxHeight2).X,
                                            Camera:WorldToViewportPoint(CF + RightVector *-BoxWidth2 + UpVector * -BoxHeight2).Y)
                                        elseif PlayerTable.Boxes[v] then
                                            PlayerTable.Boxes[v].Box1.Visible = false
                                            PlayerTable.Boxes[v].Box2.Visible = false
                                        end
                                    elseif PlayerTable.Boxes[v] then
                                        PlayerTable.Boxes[v].Box1.Visible = false
                                        PlayerTable.Boxes[v].Box2.Visible = false
                                    end
                                end
                            end
                        end
                        for i,v in next, PlayerTable.Boxes do
                            if v.Humanoid and v.Humanoid.Health <= 0 or not v.Humanoid.Parent.Parent then
                                v.Box1:Remove()
                                v.Box2:Remove()
                                PlayerTable.Boxes[i] = nil
                            end
                        end
                    end
                    task.wait()
                end
            end)
        else
            for i,v in next, PlayerTable.Boxes do
                v.Box1:Remove()
                v.Box2:Remove()
                PlayerTable.Boxes[i] = nil
            end
        end
    end
})

Visual:AddToggle({
    Name = "Player HealthBar",
    Callback = function(Value)
        Settings.Visual.HealthBar = Value

        if Settings.Visual.HealthBar then
            task.spawn(function()
                while Settings.Visual.HealthBar do
                    if CheckTarget(LocalPlayer) then
                        for i,v in next, Players:GetPlayers() do
                            if v ~= LocalPlayer then
                                if TargetCheck(v) then
                                    local Part = v.Character:FindFirstChild("Humanoid")
                                    local Distance = (v.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                                    if Distance <= Settings.Visual.Range then
                                        local OFFSET = Settings.Visual.OFFSET
                                        local ScreenPos, OnScreen = Camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                                        if OnScreen then
                                            if not PlayerTable.HealthBars[v] then
                                                PlayerTable.HealthBars[v] = {Q1 = CreateQuad(), Q2 = CreateQuad(), Q3 = CreateQuad(), Humanoid = Part}
                                            end
                                            local RightVector = v.Character.HumanoidRootPart.CFrame.RightVector
                                            local UpVector = v.Character.HumanoidRootPart.CFrame.UpVector
                                            local CF = v.Character.HumanoidRootPart.CFrame.Position
                                            local MaxHealth = v.Character.Humanoid.MaxHealth
                                            local Health = v.Character.Humanoid.Health
                                            PlayerTable.HealthBars[v].Q1.Visible = true
                                            PlayerTable.HealthBars[v].Q1.PointA = Vector2.new(Camera:WorldToViewportPoint(CF+RightVector*2.5+UpVector*2.5).X,
                                            Camera:WorldToViewportPoint(CF+RightVector*2.5+UpVector*2.5).Y)
                                            PlayerTable.HealthBars[v].Q1.PointB = Vector2.new(Camera:WorldToViewportPoint(CF+RightVector*2+UpVector*2.5).X,
                                            Camera:WorldToViewportPoint(CF+RightVector*2+UpVector*2.5).Y)
                                            PlayerTable.HealthBars[v].Q1.PointC = Vector2.new(Camera:WorldToViewportPoint(CF+RightVector*2+UpVector*-BoxHeight2).X,
                                            Camera:WorldToViewportPoint(CF+RightVector*2+UpVector*-BoxHeight2).Y)
                                            PlayerTable.HealthBars[v].Q1.Color = Color3.fromRGB(0, 0, 0)
                                            PlayerTable.HealthBars[v].Q1.PointD = Vector2.new(Camera:WorldToViewportPoint(CF+RightVector*2.5+UpVector*-BoxHeight2).X,
                                            Camera:WorldToViewportPoint(CF+RightVector*2.5+UpVector*-BoxHeight2).Y)
                
                                            PlayerTable.HealthBars[v].Q2.Visible = true
                                            PlayerTable.HealthBars[v].Q2.Color = Color3.fromRGB(1, 0, 0)
                                            PlayerTable.HealthBars[v].Q2.PointA = Vector2.new(Camera:WorldToViewportPoint(CF+RightVector*2.5+UpVector*2.5).X,
                                            Camera:WorldToViewportPoint(CF+RightVector*2.5+UpVector*2.5).Y)
                                            PlayerTable.HealthBars[v].Q2.PointB = Vector2.new(Camera:WorldToViewportPoint(CF+RightVector*2+UpVector*2.5).X,
                                            Camera:WorldToViewportPoint(CF+RightVector*2+UpVector*2.5).Y)
                                            PlayerTable.HealthBars[v].Q2.PointC = Vector2.new(Camera:WorldToViewportPoint(CF+RightVector*2+UpVector*-BoxHeight2).X,
                                            Camera:WorldToViewportPoint(CF+RightVector*2+UpVector*-BoxHeight2).Y)
                                            PlayerTable.HealthBars[v].Q2.PointD = Vector2.new(Camera:WorldToViewportPoint(CF+RightVector*2.5+UpVector*-BoxHeight2).X,
                                            Camera:WorldToViewportPoint(CF+RightVector*2.5+UpVector*-BoxHeight2).Y)
                
                                            PlayerTable.HealthBars[v].Q3.Visible = true
                                            PlayerTable.HealthBars[v].Q3.Color = Color3.fromRGB(0, 255, 0)
                                            PlayerTable.HealthBars[v].Q3.PointA = Vector2.new(Camera:WorldToViewportPoint(CF+RightVector*2.5+UpVector*(-BoxHeight2+Health/(MaxHealth/5))).X,
                                            Camera:WorldToViewportPoint(CF+RightVector*2.5+UpVector*(-BoxHeight2+Health/(MaxHealth/5))).Y)
                                            PlayerTable.HealthBars[v].Q3.PointB = Vector2.new(Camera:WorldToViewportPoint(CF+RightVector*2+UpVector*(-BoxHeight2+Health/(MaxHealth/5))).X,
                                            Camera:WorldToViewportPoint(CF+RightVector*2+UpVector*(-BoxHeight2+Health/(MaxHealth/5))).Y)
                                            PlayerTable.HealthBars[v].Q3.PointC = PlayerTable.HealthBars[v].Q1.PointC
                                            PlayerTable.HealthBars[v].Q3.PointD = PlayerTable.HealthBars[v].Q1.PointD
                                        elseif PlayerTable.HealthBars[v] then
                                            PlayerTable.HealthBars[v].Q1.Visible = false
                                            PlayerTable.HealthBars[v].Q2.Visible = false
                                            PlayerTable.HealthBars[v].Q3.Visible = false
                                        end
                                    elseif PlayerTable.HealthBars[v] then
                                        PlayerTable.HealthBars[v].Q1.Visible = false
                                        PlayerTable.HealthBars[v].Q2.Visible = false
                                        PlayerTable.HealthBars[v].Q3.Visible = false
                                    end
                                end
                            end
                        end
                        for i,v in next, PlayerTable.HealthBars do
                            if v.Humanoid and v.Humanoid.Health <= 0 or not v.Humanoid.Parent.Parent then
                                v.Q1:Remove()
                                v.Q2:Remove()
                                v.Q3:Remove()
                                PlayerTable.HealthBars[i] = nil
                            end
                        end
                    end
                    task.wait()
                end
            end)
        else
            for i,v in next, PlayerTable.HealthBars do
                v.Q1:Remove()
                v.Q2:Remove()
                v.Q3:Remove()
                PlayerTable.HealthBars[i] = nil
            end
        end
    end
})

Visual:AddToggle({
    Name = "Player Tracers",
    Callback = function(Value)
        Settings.Visual.Tracers = Value

        if Settings.Visual.Tracers then
            task.spawn(function()
                while Settings.Visual.Tracers do
                    if CheckTarget(LocalPlayer) then
                        for i,v in next, Players:GetPlayers() do
                            if v ~= LocalPlayer then
                                if TargetCheck(v) and v.Character:FindFirstChild("Head") then
                                    local Part = v.Character:FindFirstChild("Humanoid")
                                    local Distance = (v.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                                    if Distance <= Settings.Visual.Range then
                                        local OFFSET = Settings.Visual.OFFSET
                                        local ScreenPos, OnScreen = Camera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
                                        if OnScreen then
                                            if not PlayerTable.Tracers[v] then
                                                PlayerTable.Tracers[v] = {L1 = CreateLine(), L2 = CreateLine(), Humanoid = Part}
                                            end
                                            local RightVector = v.Character.HumanoidRootPart.CFrame.RightVector
                                            local RootPart = v.Character.HumanoidRootPart
                                            local Head = v.Character.Head
                                            local UpVector = v.Character.HumanoidRootPart.CFrame.UpVector
                                            local CF = v.Character.HumanoidRootPart.CFrame.Position
                                            local Ratio = math.clamp((Vector2.new(Head.Position.X, Head.Position.Y) - Vector2.new(RootPart.Position.X, RootPart.Position.Y)).Magnitude, 2, math.huge)
                                            local Root = Camera:WorldToViewportPoint(Vector3.new(Head.Position.X, RootPart.Position.Y - 3, Head.Position.Z))
                                            
                                            PlayerTable.Tracers[v].L1.Visible = true
                                            PlayerTable.Tracers[v].L1.To = Vector2.new(Root.X, Root.Y + Ratio*0.5)
                                            PlayerTable.Tracers[v].L1.From = Vector2.new(Camera.ViewportSize.X*0.5, Camera.ViewportSize.Y)
                
                                            PlayerTable.Tracers[v].L2.Visible = true
                                            PlayerTable.Tracers[v].L2.To = Vector2.new(Root.X, Root.Y + Ratio*0.5)
                                            PlayerTable.Tracers[v].L2.From = Vector2.new(Camera.ViewportSize.X*0.5, Camera.ViewportSize.Y)
                                        elseif PlayerTable.Tracers[v] then
                                            PlayerTable.Tracers[v].L1.Visible = false
                                            PlayerTable.Tracers[v].L2.Visible = false
                                        end
                                    elseif PlayerTable.Tracers[v] then
                                        PlayerTable.Tracers[v].L1.Visible = false
                                        PlayerTable.Tracers[v].L2.Visible = false
                                    end
                                end
                            end
                        end
                        for i,v in next, PlayerTable.Tracers do
                            if v.Humanoid and v.Humanoid.Health <= 0 or not v.Humanoid.Parent.Parent then
                                v.L1:Remove()
                                v.L2:Remove()
                                PlayerTable.Tracers[i] = nil
                            end
                        end
                    end
                    task.wait()
                end
            end)
        else
            for i,v in next, PlayerTable.Tracers do
                v.L1:Remove()
                v.L2:Remove()
                PlayerTable.Tracers[i] = nil
            end
        end
    end
})

Visual:AddToggle({
    Name = "Show Wearing Armor",
    Callback = function(Value)
        Settings.Visual.Armor = Value
    end
})

Visual:AddToggle({
    Name = "Totem Chams",
    Callback = function(Value)
        Settings.Visual.Totem = Value

        if Settings.Visual.Totem then
            task.spawn(LPH_NO_VIRTUALIZE(function()
                while Settings.Visual.Totem do
                    for i,v in next, Workspace.Totems:GetChildren() do
                        if v:IsA("Model") and v.Name == "Tribe Totem" and v.PrimaryPart ~= nil and v:FindFirstChild("Coloration") then
                            if not Totems[v] then
                                local Highlight = CreateHighlight()
                                Highlight.Name = Spoof()
                                Highlight.FillColor = v.Coloration.Color
                                Highlight.Adornee = v
                                Totems[v] = {Instance = v.PrimaryPart, Highlighted = Highlight}
                            end
                        end
                    end
                    for i,v in next, Totems do
                        if not v.Instance.Parent then
                            v.Highlighted:Destroy()
                            Totems[i] = nil
                        end
                    end
                    task.wait()
                end
            end))
        else
            for i,v in next, Totems do
                v.Highlighted:Destroy()
                Totems[i] = nil
            end
        end
    end
})

Visual:AddToggle({
    Name = "Dropped Items ESP",
    Callback = function(Value)
        Settings.Visual.Dropped = Value

        if Settings.Visual.Dropped then
            task.spawn(LPH_NO_VIRTUALIZE(function()
                while Settings.Visual.Dropped do
                    for i,v in next, Workspace.Items:GetChildren() do
                        if v:IsA("BasePart") and v ~= nil then
                            if not Dropped[v] then
                                local Text = CreateText()
                                Dropped[v] = {Instance = v, Draw = Text}
                            end
                            local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
                            local ScreenPos, OnScreen = Camera:WorldToViewportPoint(v.Position)
                            if Distance <= Settings.Visual.DroppedRange then
                                if OnScreen then
                                    Dropped[v].Draw.Text = v.Name .. " | " .. math.round(Distance)
                                    Dropped[v].Draw.Visible = true
                                    Dropped[v].Draw.Size = Settings.Visual.Size
                                    Dropped[v].Draw.Font = Drawing.Fonts[tostring(Settings.Visual.Font)]
                                    Dropped[v].Draw.Color = v.Color
                                    Dropped[v].Draw.Position = Vector2.new(ScreenPos.X, ScreenPos.Y)
                                elseif Dropped[v] then
                                    Dropped[v].Draw.Visible = false
                                end
                            elseif Dropped[v] then
                                Dropped[v].Draw.Visible = false
                            end
                        end
                    end
                    for i,v in next, Dropped do
                        if not v.Instance.Parent then
                            v.Draw:Remove()
                            Dropped[i] = nil
                        end
                    end
                    task.wait()
                end
            end))
        else
            for i,v in next, Dropped do
                v.Draw:Remove()
                Dropped[i] = nil
            end
        end
    end
})

Visual:AddSlider({
    Name = "Dropped Items Detection",
    Min = 1,
    Max = 5000,
    Default = 500,
    Color = Color3.fromRGB(166,0,255),
    Increment = 5,
    ValueName = "Range",
    Callback = function(Value)
        Settings.Visual.DroppedRange = Value
    end
})

Visual:AddToggle({
    Name = "Entity ESP",
    Callback = function(Value)
        Settings.Visual.Entity = Value

        if Settings.Visual.Entity then
            task.spawn(LPH_NO_VIRTUALIZE(function()
                while Settings.Visual.Entity do
                    for i,v in next, Workspace.Critters:GetChildren() do
                        if v:IsA("Model") and v.PrimaryPart ~= nil and v:FindFirstChild("HumanoidRootPart") then
                            if not EntityTable[v] then
                                local Text = CreateText()
                                EntityTable[v] = {Instance = v.HumanoidRootPart, Draw = Text}
                            end
                            local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
                            local ScreenPos, OnScreen = Camera:WorldToViewportPoint(v.PrimaryPart.Position)
                            local Render = LocalPlayer.PlayerGui.MainGui.RightPanel.SettingsUI.List.Slider.Holder.Button.Text
                            if Distance <= tonumber(Render) then
                                if OnScreen then
                                    EntityTable[v].Draw.Text = v.Name .. " | " .. math.round(Distance)
                                    EntityTable[v].Draw.Visible = true
                                    EntityTable[v].Draw.Size = Settings.Visual.Size
                                    EntityTable[v].Draw.Font = Drawing.Fonts[tostring(Settings.Visual.Font)]
                                    EntityTable[v].Draw.Position = Vector2.new(ScreenPos.X, ScreenPos.Y)
                                elseif EntityTable[v] then
                                    EntityTable[v].Draw.Visible = false
                                end
                            elseif EntityTable[v] then
                                EntityTable[v].Draw.Visible = false
                            end
                        end
                    end
                    for i,v in next, EntityTable do
                        if not v.Instance.Parent then
                            v.Draw:Remove()
                            EntityTable[i] = nil
                        end
                    end
                    task.wait()
                end
            end))
        else
            for i,v in next, EntityTable do
                v.Draw:Remove()
                EntityTable[i] = nil
            end
        end
    end
})

Visual:AddToggle({
    Name = "Enable Resources ESP",
    Callback = function(Value)
        Settings.Visual.OreESP = Value

        if Settings.Visual.OreESP then
            task.spawn(function()
                while Settings.Visual.OreESP do
                    for i,v in next, Workspace.Resources:GetChildren() do
                        if v:IsA("Model") and table.find(Settings.Visual.Ores, v.Name) and v.PrimaryPart ~= nil and v:FindFirstChild("Health") then
                            if not ObjectTable[v] then
                                local Resource = v.Health.Value
                                local Part = v.PrimaryPart
                                local Drawing = CreateText()
                                ObjectTable[v] = {Draw = Drawing, Instance = Part, Health = Resource}
                            end
                            local ScreenPos, OnScreen = Camera:WorldToViewportPoint(v.PrimaryPart.Position)
                            local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude
                            if Distance <= Settings.Visual.Range then
                                if OnScreen then
                                    if Settings.Visual.OreDistance then
                                        if Settings.Visual.OreHealth then
                                            ObjectTable[v].Draw.Text = v.Name .. " [" .. tostring(math.floor(Distance)) .. "m] " .. tostring(v:FindFirstChild("Health").Value) .. " HP"
                                        else
                                            ObjectTable[v].Draw.Text = v.Name .. " [" .. tostring(math.floor(Distance)) .. "m]"
                                        end
                                    elseif Settings.Visual.OreHealth then
                                        ObjectTable[v].Draw.Text = v.Name .. " " .. tostring(v.Health.Value) .. " HP"
                                    else
                                        ObjectTable[v].Draw.Text = v.Name
                                    end
                                    if v:FindFirstChild("Node") then
                                        ObjectTable[v].Draw.Color = v.Node.Color
                                    elseif v:FindFirstChild("Totem") then
                                        ObjectTable[v].Draw.Color = v.Totem.Color
                                    else
                                        ObjectTable[v].Draw.Color = Color3.fromRGB(166, 0, 255)
                                    end
                                    ObjectTable[v].Draw.Visible = true
                                    ObjectTable[v].Draw.Size = Settings.Visual.Size
                                    ObjectTable[v].Draw.Font = Drawing.Fonts[tostring(Settings.Visual.Font)]
                                    ObjectTable[v].Draw.Position = Vector2.new(ScreenPos.X, ScreenPos.Y)
                                elseif ObjectTable[v] then
                                    ObjectTable[v].Draw.Visible = false
                                end
                            elseif ObjectTable[v] then
                                ObjectTable[v].Draw.Visible = false
                            end
                        elseif ObjectTable[v] then
                            ObjectTable[v].Draw.Visible = false
                        end
                    end
                    for i,v in next, ObjectTable do
                        if not v.Instance.Parent then
                            v.Draw:Remove()
                            ObjectTable[i] = nil
                        end
                    end
                    task.wait()
                end
            end)
        else
            for i,v in next, ObjectTable do
                v.Draw:Remove()
                ObjectTable[i] = nil
            end
        end
    end
})

Visual:AddDropdown({
    Name = "Choose Resources",
    Default = "Coal Node",
    Multi = true,
    Options = {"Coal Node","Iron Node","Gold Node","Adurite Rich Rock","Adurite Rock","Crystal Lode","Meteor Rock","Emerald Lode","Ancient Tree","Hateful God",
    "Miserable God","Lonely God","Old God","Sleeping God","Furious God", "Void Crag"},
    Callback = function(Value)
        Settings.Visual.Ores = Value
    end
})

Visual:AddToggle({
    Name = "Show Distance",
    Callback = function(Value)
        Settings.Visual.OreDistance = Value
    end
})

Visual:AddToggle({
    Name = "Show Health",
    Callback = function(Value)
        Settings.Visual.OreHealth = Value
    end
})

local Section = Visual:AddSection({
    Name = "Settings Section"
})

Visual:AddSlider({
    Name = "Text OffSet",
    Min = -100,
    Max = 200,
    Default = 20,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "OffSet",
    Callback = function(Value)
        Settings.Visual.OFFSET = Value
    end
})

Visual:AddDropdown({
    Name = "Choose Font",
    Default = "System",
    Options = {'UI', "System", "Plex", "Monospace"},
    Callback = function(Value)
        Settings.Visual.Font = Value
    end
})

Visual:AddSlider({
    Name = "Text Size",
    Min = 8,
    Max = 25,
    Default = 13,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Size",
    Callback = function(Value)
        Settings.Visual.Size = Value
    end    
})

Visual:AddSlider({
    Name = "Detection Distance",
    Min = 1,
    Max = 5000,
    Default = 500,
    Color = Color3.fromRGB(166,0,255),
    Increment = 5,
    ValueName = "Range",
    Callback = function(Value)
        Settings.Visual.Range = Value
    end
})

local Section = Visual:AddSection({
    Name = "World Enviroment Section"
})

if PlaceID == 11729688377 then
    Visual:AddToggle({
        Name = "Sky Box Changer",
        Callback = function(Value)
            Settings.Visual.SkyBox = Value

            if Settings.Visual.SkyBox then
                task.spawn(LPH_NO_VIRTUALIZE(function()
                    while Settings.Visual.SkyBox do
                        if Lighting:FindFirstChild("Rain") then
                            Workspace.RainPart:Destroy()
                            Lighting:FindFirstChild("Rain"):Destroy()
                            ReplicatedStorage.Skies.Shine:Clone().Parent = Lighting
                            task.wait(0.3)
                            Lighting.Shine.SkyboxBk = LibSkybox[SelectSky].SkyboxBk
                            Lighting.Shine.SkyboxDn = LibSkybox[SelectSky].SkyboxDn
                            Lighting.Shine.SkyboxFt = LibSkybox[SelectSky].SkyboxFt
                            Lighting.Shine.SkyboxLf = LibSkybox[SelectSky].SkyboxLf
                            Lighting.Shine.SkyboxRt = LibSkybox[SelectSky].SkyboxRt
                            Lighting.Shine.SkyboxUp = LibSkybox[SelectSky].SkyboxUp
                        elseif Lighting:FindFirstChild("Doom") then
                            Lighting:FindFirstChild("Doom"):Destroy()
                            ReplicatedStorage.Skies.Shine:Clone().Parent = Lighting
                            task.wait(0.3)
                            Lighting.Shine.SkyboxBk = LibSkybox[SelectSky].SkyboxBk
                            Lighting.Shine.SkyboxDn = LibSkybox[SelectSky].SkyboxDn
                            Lighting.Shine.SkyboxFt = LibSkybox[SelectSky].SkyboxFt
                            Lighting.Shine.SkyboxLf = LibSkybox[SelectSky].SkyboxLf
                            Lighting.Shine.SkyboxRt = LibSkybox[SelectSky].SkyboxRt
                            Lighting.Shine.SkyboxUp = LibSkybox[SelectSky].SkyboxUp
                        else
                            Lighting.Shine.SkyboxBk = LibSkybox[SelectSky].SkyboxBk
                            Lighting.Shine.SkyboxDn = LibSkybox[SelectSky].SkyboxDn
                            Lighting.Shine.SkyboxFt = LibSkybox[SelectSky].SkyboxFt
                            Lighting.Shine.SkyboxLf = LibSkybox[SelectSky].SkyboxLf
                            Lighting.Shine.SkyboxRt = LibSkybox[SelectSky].SkyboxRt
                            Lighting.Shine.SkyboxUp = LibSkybox[SelectSky].SkyboxUp
                        end
                        task.wait()
                    end
                end))
            else
                local OldSky = Lighting:FindFirstChildOfClass("Sky")
                Lighting[OldSky.Name]:Destroy()
                ReplicatedStorage.Skies[OldSky.Name]:Clone().Parent = Lighting
                OldSky = nil
            end
        end
    })

    Visual:AddDropdown({
        Name = "Select Sky",
        Default = "Neptune",
        Options = {'Neptune', 'Nebula', 'Vaporwave', 'Clouds', 'Twilight', 'Chill', 'Redshift', 'Blue Stars', 'Blue Aurora'},
        Callback = function(Value)
            SelectSky = Value
        end    
    })
end

Visual:AddToggle({
    Name = "Terrain Changer",
    Callback = function(Value)
        Settings.Visual.TerrainChanger = Value

        task.spawn(function()
            LPH_NO_VIRTUALIZE(function()
                while Settings.Visual.TerrainChanger do
                    if CheckTarget(LocalPlayer) then
                        local RootPart = LocalPlayer.Character.Humanoid.RootPart.CFrame
                        local Range = Vector3.new(Settings.Visual.RangeTerrain,Settings.Visual.RangeTerrain,Settings.Visual.RangeTerrain)
                        Terrain:ReplaceMaterialInTransform(RootPart,Range,Settings.Visual.MaterialToPut,Enum.Material[Settings.Visual.Material])
                    end
                    task.wait()
                end
            end)()
        end)
    end
})

Visual:AddDropdown({
    Name = "Material for Put",
    Default = "Grass",
    Options = Materials,
    Callback = function(Value)
        Settings.Visual.MaterialToPut = Value
    end
})

Visual:AddDropdown({
    Name = "Material to Change",
    Default = "CrackedLava",
    Options = Materials,
    Callback = function(Value)
        Settings.Visual.Material = Value
    end
})

Visual:AddSlider({
    Name = "Range to Replace Material",
    Min = 1,
    Max = 1000,
    Default = 100,
    Color = Color3.fromRGB(166,0,255),
    Increment = 5,
    ValueName = "Range",
    Callback = function(Value)
        Settings.Visual.RangeTerrain = Value
    end    
})

if PlaceID == 11729688377 then
    Utilities["Remove Grass"] = Visual:AddToggle({
        Name = "Remove Grass",
        Callback = function(Value)
            local Sethiddenproperty = sethiddenproperty
            if Value and gethiddenproperty and gethiddenproperty(Terrain, "Decoration") then
                if Sethiddenproperty then
                    Sethiddenproperty(Terrain, 'Decoration', false)
                else
                    local Message = "your exploit doesn't support [sethiddenproperty] function"
                    OrionLib:MakeNotification({Name = "Notify",Content = Message,Image = "rbxassetid://7733658504",Time = 8})
                    Utilities["Remove Grass"]:Set(false)
                end
            elseif gethiddenproperty and gethiddenproperty(Terrain, "Decoration") == false then
                Sethiddenproperty(Terrain, 'Decoration', true)
            end
        end
    })
end

Visual:AddToggle({
    Name = "Remove Water",
    Default = false,
    Callback = function(Value)
        Settings.Visual.RemoveWater = Value

        task.spawn(function()
            LPH_NO_VIRTUALIZE(function()
                while Settings.Visual.RemoveWater do
                    if CheckTarget(LocalPlayer) then
                        local RootPart = LocalPlayer.Character.Humanoid.RootPart.CFrame
                        local Range = Vector3.new(Settings.Visual.RangeWater,Settings.Visual.RangeWater,Settings.Visual.RangeWater)
                        Terrain:ReplaceMaterialInTransform(RootPart,Range,Enum.Material.Water,Enum.Material.Air)
                    end
                    task.wait()
                end
            end)()
        end)
    end
})

Visual:AddSlider({
    Name = "Range to Remove Water",
    Min = 1,
    Max = 1000,
    Default = 100,
    Color = Color3.fromRGB(166,0,255),
    Increment = 5,
    ValueName = "Range",
    Callback = function(Value)
        Settings.Visual.RangeWater = Value
    end    
})

Visual:AddColorpicker({
    Name = 'Water Color',
    Default = Terrain.WaterColor,
    Callback = function(Value)
        Terrain.WaterColor = Value
    end
})

Visual:AddColorpicker({
    Name = 'Grass Color',
    Default = Terrain:GetMaterialColor(Enum.Material.Grass),
    Callback = function(Value)
        Terrain:SetMaterialColor(Enum.Material.Grass, Value)
    end
})

Visual:AddColorpicker({
    Name = 'Ambient',
    Default = Lighting.Ambient,
    Callback = function(Value)
        Lighting.Ambient = Value
    end
})

Visual:AddColorpicker({
    Name = 'ColorShift_Bottom',
    Default = Lighting.ColorShift_Bottom,
    Callback = function(Value)
        Lighting.ColorShift_Bottom = Value
    end
})

Visual:AddColorpicker({
    Name = 'ColorShift_Top',
    Default = Lighting.ColorShift_Top,
    Callback = function(Value)
        Lighting.ColorShift_Top = Value
    end
})

Visual:AddColorpicker({
    Name = 'OutdoorAmbient',
    Default = Lighting.OutdoorAmbient,
    Callback = function(Value)
        Lighting.OutdoorAmbient = Value
    end
})

Visual:AddColorpicker({
    Name = 'Fog Color',
    Default = Lighting.FogColor,
    Callback = function(Value)
        Lighting.FogColor = Value
    end
})

Visual:AddSlider({
    Name = "Fog End",
    Min = 0,
    Max = 4500,
    Default = Lighting.FogEnd,
    Color = Color3.fromRGB(166,0,255),
    Increment = 100,
    ValueName = "Fog End",
    Callback = function(Value)
        Lighting.FogEnd = Value
    end
})

Visual:AddSlider({
    Name = "Brightness",
    Min = 0,
    Max = 10,
    Default = Lighting.Brightness,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Brightness",
    Callback = function(Value)
        Lighting.Brightness = Value
    end
})


Visual:AddSlider({
    Name = "Time Of Day",
    Min = 0,
    Max = 24,
    Default = Lighting.ClockTime,
    Color = Color3.fromRGB(166,0,255),
    Increment = 0.1,
    ValueName = "Time",
    Callback = function(Value)
        Lighting.ClockTime = Value
    end
})

Visual:AddSlider({
    Name = "Contrast",
    Min = 0,
    Max = 3,
    Default = Lighting.ColorCorrection.Contrast,
    Color = Color3.fromRGB(166,0,255),
    Increment = 0.1,
    ValueName = "Contrast",
    Callback = function(Value)
        Lighting.ColorCorrection.Contrast = Value
    end
})

Visual:AddSlider({
    Name = "Saturation",
    Min = 0,
    Max = 3,
    Default = Lighting.ColorCorrection.Saturation,
    Color = Color3.fromRGB(166,0,255),
    Increment = 0.1,
    ValueName = "Saturation",
    Callback = function(Value)
        Lighting.ColorCorrection.Saturation = Value
    end
})

local Section = Keybind:AddSection({
    Name = "Keybind Section"
})

Keybind:AddBind({
    Name = "Auto Heal",
    Default = Enum.KeyCode.World0,
    Hold = false,
    Callback = function()
        if Settings.Combat.AutoHeal == true then
            Utilities["Auto Heal"]:Set(false)
            OrionLib:MakeNotification({Name = "Notify",Content = "Auto Heal Has Been Disabled",Image = "rbxassetid://7733658504",Time = 4})
        else
            OrionLib:MakeNotification({Name = "Notify",Content = "Auto Heal Has Been Enabled",Image = "rbxassetid://7733658504",Time = 4})
            Utilities["Auto Heal"]:Set(true)
        end
    end
})

Keybind:AddBind({
    Name = "Kill Aura",
    Default = Enum.KeyCode.World0,
    Hold = false,
    Callback = function()
        if Settings.Combat.KillAura == false then
            Utilities["Kill Aura"]:Set(true)
            OrionLib:MakeNotification({Name = "Notify",Content = "Kill Aura Has Been Enabled",Image = "rbxassetid://7733658504",Time = 4})
        else
            OrionLib:MakeNotification({Name = "Notify",Content = "Kill Aura Has Been Disabled",Image = "rbxassetid://7733658504",Time = 4})
            Utilities["Kill Aura"]:Set(false)
        end
    end    
})

Keybind:AddBind({
    Name = "Equip Armor",
    Default = Enum.KeyCode.World0,
    Hold = false,
    Callback = function()
        local InventoryCheck = LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List
        if PlaceID == 11729688377 then
            if InventoryCheck then
                for _, v in next, InventoryCheck:GetChildren() do
                    local lower = v.Name:lower()
                    if lower:find("chestplate") or lower:find("greaves") or lower:find("helmet") or lower:find("shroud") or  lower:find("mask") or lower:find("crown") then
                        if v.LayoutOrder then
                            for i = 1, 3 do
                                Packets.UseBagItem.send(v.LayoutOrder)
                                task.wait(Settings.Combat.DelayA)
                            end
                        end
                    elseif lower:find("god") and lower:find("halo") then
                        if v.LayoutOrder then
                            for i = 1, 3 do
                                Packets.UseBagItem.send(v.LayoutOrder)
                                task.wait(Settings.Combat.DelayA)
                            end
                        end
                    end
                end
            end
        elseif PlaceID == 11879754496 then
            if InventoryCheck then
                for _, v in next, InventoryCheck:GetChildren() do
                    local lower = v.Name:lower()
                    if lower:find("chestplate") or lower:find("greaves") or lower:find("helmet") or lower:find("shroud") or  lower:find("mask") or lower:find("crown") then
                        if v.LayoutOrder then
                            for i = 1, 3 do
                                Packets.UseBagItem.send(v.LayoutOrder)
                                task.wait(Settings.Combat.DelayA)
                            end
                        end
                    elseif lower:find("god") and lower:find("halo") then
                        if v.LayoutOrder then
                            for i = 1, 3 do
                                Packets.UseBagItem.send(v.LayoutOrder)
                                task.wait(Settings.Combat.DelayA)
                            end
                        end
                    end
                end
            end
        end
    end
})

Keybind:AddSlider({
    Name = "Delay to Put Armor",
    Min = 0.1,
    Max = 5,
    Default = 1,
    Color = Color3.fromRGB(166,0,255),
    Increment = 0.1,
    ValueName = "Delay",
    Callback = function(Value)
        Settings.Combat.DelayA = Value
    end
})

Keybind:AddBind({
    Name = "Counter Structure",
    Default = Enum.KeyCode.World0,
    Hold = false,
    Callback = function()
        if CheckTarget(LocalPlayer) then
            local Target = GetClosest(50)
            if Target then
                local RootPart = Target.HumanoidRootPart
                local CF = RootPart.CFrame * CFrame.new(0, 0, 5)
                if Target.Humanoid.Health < Settings.Misc.HP then
                    if Settings.Misc.ChooseS == "Wood Wall" then
                        Packets.PlaceStructure.send({buildingName = Settings.Misc.ChooseS, yrot = 0, vec = CF.Position, isMobile = false})
                    elseif Settings.Misc.ChooseS == "Dock" then
                        Packets.PlaceStructure.send({buildingName = Settings.Misc.ChooseS, yrot = 0, vec = RootPart.CFrame.Position, isMobile = false})
                    end
                end
            end
        end
    end
})

Keybind:AddDropdown({
    Name = "Choose Structure",
    Default = "Wood Wall",
    Options = {'Wood Wall', 'Dock', "Hut"},
    Callback = function(Value)
        Settings.Misc.ChooseS = Value
    end
})

Keybind:AddSlider({
    Name = "Put Structure At",
    Min = 1,
    Max = 100,
    Default = 50,
    Color = Color3.fromRGB(166,0,255),
    Increment = 5,
    ValueName = "Health",
    Callback = function(Value)
        Settings.Misc.HP = Value
    end
})

Keybind:AddBind({
    Name = "Hut Yourself",
    Default = Enum.KeyCode.World0,
    Hold = false,
    Callback = function()
        if PlaceID == 11729688377 then
            if CheckTarget(LocalPlayer) then
                local HeadPos = LocalPlayer.Character.Head.CFrame * CFrame.new(0, -5, 0)
                local CalculatedPos = HeadPos + Vector3.new(0, -4, 0)
                Packets.PlaceStructure.send({buildingName = "Big Ol' Hut", yrot = 0, vec = HeadPos, isMobile = false})
            end
        elseif PlaceID == 11879754496 then
            if CheckTarget(LocalPlayer) then
                local HeadPos = LocalPlayer.Character.Head.CFrame * CFrame.new(0, -5, 0)
                Packets.PlaceStructure.send({buildingName = "Big Ol' Hut", yrot = 0, vec = HeadPos, isMobile = false})
            end
        end
    end
})

Keybind:AddBind({
    Name = "Anti Lag",
    Default = Enum.KeyCode.World0,
    Hold = false,
    Callback = function()
        if Settings.Combat.AntiLag == false then
            Utilities["Anti Lag"]:Set(true)
            OrionLib:MakeNotification({Name = "Notify",Content = "Anti Lag Has Been Enabled",Image = "rbxassetid://7733658504",Time = 4})
        else
            OrionLib:MakeNotification({Name = "Notify",Content = "Anti Lag Has Been Disabled",Image = "rbxassetid://7733658504",Time = 4})
            Utilities["Anti Lag"]:Set(false)
        end
    end    
})

local Section = Misc:AddSection({
    Name = "Server Section"
})

Misc:AddButton({
    Name = "Rejoin",
    Default = false,
    Callback = function()
        if #Players:GetPlayers() <= 1 then
            Players.LocalPlayer:Kick("\nRejoining...")
            task.wait()
            TeleportService:Teleport(game.PlaceId, Players.LocalPlayer) -- I love add scripts from inf yield
        else
            TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, Players.LocalPlayer)
        end
    end
})

Misc:AddButton({
    Name = "Anti Idle",
    Default = false,
    Callback = function()
        local GC = getconnections or get_signal_cons

        if GC then
            OrionLib:MakeNotification({Name = "Notify",Content = "Anti AFK: Has Been Enabled",Image = "rbxassetid://7733658504",Time = 8})
            for i,v in pairs(GC(Players.LocalPlayer.Idled)) do
                if v["Disable"] then
                    v["Disable"](v)
                elseif v["Disconnect"] then -- skidded from inf yield (:
                    v["Disconnect"](v)
                end
            end
        else
            OrionLib:MakeNotification({Name = "Notify",Content = "Your exploit doesn't support [getconnections] function",Image = "rbxassetid://7733658504",Time = 5})
        end
    end
})

Misc:AddButton({
    Name = "Server Hop",
    Default = false,
    Callback = function()
        if httprequest then
            local servers = {}
            local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", game.PlaceId)})
            local body = HttpService:JSONDecode(req.Body)
    
            if body and body.data then
                for i, v in next, body.data do
                    if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
                        table.insert(servers, 1, v.id)
                    end
                end
            end
    
            if #servers > 0 then
                TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer) --skidded from inf yield
            else
                OrionLib:MakeNotification({Name = "Notify",Content = "Couldn't find a server.",Image = "rbxassetid://7733658504",Time = 8})
                return
            end
        else
            OrionLib:MakeNotification({Name = "Notify",Content = "your exploit does not support [httprequest] function",Image = "rbxassetid://7733658504",Time = 8})
        end
    end
})

local Section = Misc:AddSection({
    Name = "Utilities Section"
})

Utilities["Staff Detection"] = Misc:AddToggle({
    Name = "Staff Detection",
    Default = false,
    Callback = function(Value)
        Settings.Combat.StaffDetection = Value

        if Settings.Combat.StaffDetection then
            task.spawn(function()
                for i, v in pairs(Players:GetPlayers()) do
                    if v.Character ~= nil then
                        if table.find(Roles, v:GetRoleInGroup(9132225)) then
                            if AlertMode == "Kick" then
                                LocalPlayer:Kick("Staff Detected: " .. v.Name .. "Rank: " .. v:GetRoleInGroup(9132225))
                            elseif AlertMode == "Notify" then
                                for i,v in next, Utilities do
                                    if i ~= "Respawn" and i ~= "Boat" and i ~= "Pickup Type" and i ~= "Custom" and i ~= "Staff Detection" then
                                        v:Set(false)
                                    end
                                end
                                OrionLib:MakeNotification({Name = "Notify",Content = "Staff Detected: " .. v.Name .. "Rank: " .. v:GetRoleInGroup(9132225),Image = "rbxassetid://7733658504",Time = 30})
                            end
                        end
                    end
                end
                Connections["Staff"] = Players.PlayerAdded:Connect(LPH_NO_VIRTUALIZE(function(plr)
                    if plr.Character ~= nil then
                        if table.find(Roles, plr:GetRoleInGroup(9132225)) then
                            if AlertMode == "Kick" then
                                LocalPlayer:Kick("Staff Detected: " .. plr.Name .. "Rank: " .. plr:GetRoleInGroup(9132225))
                            elseif AlertMode == "Notify" then
                                for i,v in next, Utilities do
                                    if i ~= "Respawn" and i ~= "Boat" and i ~= "Pickup Type" and i ~= "Custom" and i ~= "Staff Detection" then
                                        v:Set(false)
                                    end
                                end
                                OrionLib:MakeNotification({Name = "Notify",Content = "Staff Detected: " .. v.Name .. "Rank: " .. plr:GetRoleInGroup(9132225),Image = "rbxassetid://7733658504",Time = 30})
                            end
                        end
                    end
                end))
            end)
        elseif Connections["Staff"] then
            Connections["Staff"]:Disconnect()
            Connections["Staff"] = nil
        end
    end
})

Utilities["Staff Detection"]:Set(true)

Misc:AddDropdown({
    Name = "Choose Method",
    Default = "Notify",
    Options = {"Kick", "Notify"},
    Callback = function(Value)
        AlertMode = Value
    end
})

Utilities["Auto Consume"] = Misc:AddToggle({
    Name = "Auto Consume",
    Default = false,
    Callback = function(Value)
        Settings.Misc.Consume = Value

        task.spawn(LPH_NO_VIRTUALIZE(function()
            while Settings.Misc.Consume do
                if CheckTarget(LocalPlayer) then
                    for i,v in next, Workspace.Items:GetChildren() do
                        if v:IsA("BasePart") and table.find(TableFood, v.Name) then
                            local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
                            if Distance <= 20 then
                                if PlaceID == 11729688377 then
                                    Packets.Consume.send(GetEntityID(v))
                                elseif PlaceID == 11879754496 then
                                    Packets.Consume.send(GetEntityID(v))
                                end
                            end
                        end
                    end
                end
                task.wait()
            end
        end))
    end
})

Misc:AddToggle({
    Name = "Auto Craft",
    Default = false,
    Callback = function(Value)
        Settings.Misc.AutoCraft = Value

        task.spawn(LPH_NO_VIRTUALIZE(function()
            while Settings.Misc.AutoCraft do
                if CheckTarget(LocalPlayer) then
                    Packets.CraftItem.send(ItemID[Settings.Misc.ChooseItem])
                end
                task.wait()
            end
        end))
    end
})

Misc:AddDropdown({
    Name = "Choose Item",
    Default = "Arrow",
    Options = {"Club", "Arrow", "Sling", "Leaf Bag", "Leaf Shirt", "Leaf Pants", "Light", "Fishing Rod", "Bow", "War Horn"},
    Callback = function(Value)
        Settings.Misc.ChooseItem = Value
    end
})

Misc:AddToggle({
    Name = "Boat Speed Changer",
    Default = false,
    Callback = function(Value)
        Settings.Misc.Boat = Value

        task.spawn(LPH_NO_VIRTUALIZE(function()
            if Settings.Misc.Boat then
                local Secure = Spoof()
                while Settings.Misc.Boat do
                    if not LocalPlayer.Character.Humanoid.SeatPart and Utilities.Boat then
                        Utilities.Boat:Destroy()
                        Utilities.Boat = nil
                    end
                    if CheckTarget(LocalPlayer) and LocalPlayer.Character.Humanoid.SeatPart then
                        if not Utilities.Boat and not LocalPlayer.Character.Humanoid.SeatPart:FindFirstChild(Secure) then
                            local BodyVelocity = Instance.new("LinearVelocity", LocalPlayer.Character.Humanoid.SeatPart)
                            BodyVelocity.Name = "w"
                            --BodyVelocity.P = math.huge
                            BodyVelocity.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
                            Utilities.Boat = BodyVelocity
                        end
                        if LocalPlayer.Character.Humanoid.SeatPart:FindFirstChildWhichIsA("LinearVelocity") then
                        local LookVector = LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector
                        local Velocity = Utilities.Boat.Velocity.Y
                        local Speed = Settings.Misc.BoatSpeed
                        Utilities.Boat.Velocity = Vector3.new(LookVector.X*Speed, 0, LookVector.Z*Speed)
                    end
                    task.wait()
                end
            elseif Utilities.Boat then
                Utilities.Boat:Destroy()
                Utilities.Boat = nil
            end
        end))
    end
})

Misc:AddSlider({
    Name = "Choose Speed",
    Min = 0,
    Max = 30,
    Default = 16,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Speed",
    Callback = function(Value)
        Settings.Misc.BoatSpeed = Value
    end
})

Misc:AddToggle({
    Name = "Auto Fishing",
    Default = false,
    Callback = function(Value)
        Settings.Misc.AutoFishing = Value

        task.spawn(LPH_NO_VIRTUALIZE(function()
            while Settings.Misc.AutoFishing do
                if CheckTarget(LocalPlayer) and LocalPlayer.Character:FindFirstChild("LowerTorso") then
                    local RootPart = LocalPlayer.Character.HumanoidRootPart
                    local Lower = LocalPlayer.Character.LowerTorso
                    local Rod = LocalPlayer.Character.Tools:FindFirstChild("Fishing Rod")
                    if Rod then
                        local Bobber = Rod:FindFirstChild("Bobber")
                        if Bobber then
                            local Emitter = Bobber:FindFirstChild("ParticleEmitter")
                            if Emitter.Enabled then
                                Packets.RodEnd.send()
                            end
                        else
                            local Direction = RootPart.CFrame * CFrame.new(0, 0, 10)
                            Packets.RodSwing.send({direction = Direction.Position, origin = RootPart.Position})
                        end
                    end
                end
                task.wait()
            end
        end))
    end
})

Misc:AddToggle({
    Name = "Auto Respawn",
    Default = false,
    Callback = function(Value)
        Settings.Misc.AutoRespawn = Value

        task.spawn(LPH_NO_VIRTUALIZE(function()
            if Settings.Misc.AutoRespawn then
                Utilities["Respawn"] = LocalPlayer.CharacterAdded:Connect(function(Character)
                    if Character:FindFirstChild("HumanoidRootPart") then
                        local Button = LocalPlayer.PlayerGui:FindFirstChild("SpawnGui"):FindFirstChild("Customization"):FindFirstChild("PlayButton")
                        if Button and Button.Visible then
                            for i,v in next, getconnections(Button.Activated) do
                                v:Fire()
                            end
                        end
                    end
                end)
            elseif Utilities["Respawn"] then
                Utilities["Respawn"]:Disconnect()
                Utilities["Respawn"] = nil
            end
        end))
    end
})

Misc:AddButton({
    Name = "Redeem Codes",
    Default = false,
    Callback = function()
        if getconnections then
            local Codes = ""
            local Success, Response = pcall(function()
                Codes = game:HttpGet("https://booga-booga-reborn-wiki.fandom.com/wiki/Codes")
            end)
            if Success then
                Codes = Codes:gmatch("<li>([%w\n_!]*)</li>")
                for Code in Codes do
                    Code = Code:gsub("\n", "")
                    LocalPlayer.PlayerGui.MainGui.LeftPanel.CodesLeft.Frame.Frame.Frame.TextBox.Text = Code
                    local Button = LocalPlayer.PlayerGui.MainGui.LeftPanel.CodesLeft.Frame.CreateButton.Activated
                    for i,v in next, getconnections(Button) do
                        v:Fire()
                    end
                end
            else
                OrionLib:MakeNotification({Name = "Notify",Content = "failed to get the codes:\n" .. Response,Image = "rbxassetid://7733658504",Time = 8})
            end
        else
            OrionLib:MakeNotification({Name = "Notify",Content = "your exploit doesn't support this feature",Image = "rbxassetid://7733658504",Time = 8})
        end
    end
})

Misc:AddToggle({
    Name = "Quick Toggles",
    Default = false,
    Callback = function(Value)
        if Value then
            if not CoreGui:FindFirstChild("Quick Toggles") then
                local ScreenGui = Instance.new("ScreenGui", CoreGui)
                ScreenGui.Name = "Quick Toggles"
            
                local Frame = Instance.new("Frame", ScreenGui)
                Frame.Size = UDim2.new(0, -230, 0, -230)
                Frame.Position = UDim2.new(1, -230, 0, 195)
                Frame.AnchorPoint = Vector2.new(1, 0)
                Frame.BackgroundColor3 = Color3.new(0, 0, 0)
                Frame.BackgroundTransparency = 0.5
            
                local TextLabel = Instance.new("TextLabel", Frame)
                TextLabel.Size = UDim2.new(1, 0, 0, 30)
                TextLabel.BackgroundColor3 = Color3.new(0, 0, 0)
                TextLabel.TextColor3 = Color3.new(255, 0, 0)
                TextLabel.Font = Enum.Font.SourceSansBold
                TextLabel.TextSize = 18
                TextLabel.Text = "Quick Toggles"
                
                for i = 1, 5 do
                    local TextButton = Instance.new("TextButton", Frame)
                    TextButton.Size = UDim2.new(1, -20, 0, 30)
                    TextButton.Position = UDim2.new(0, 10, 0, 40 + (i-1) * 35)
                    TextButton.BackgroundColor3 = Color3.new(0, 0, 0)
                    TextButton.TextColor3 = Color3.new(255, 0, 0)

                    TextButton.Font = Enum.Font.SourceSans
                    TextButton.TextSize = 14
                    TextButton.Name = "Button " .. i
                    TextButton.Text = "Button " .. i

                    local function Clicked(name)
                        if name == "Auto Heal" then
                            if AutoHeal == false then
                                OrionLib:MakeNotification({Name = "Notify",Content = "Auto Heal Has Been Enabled",Image = "rbxassetid://7733658504",Time = 4})
                                Utilities["Auto Heal"]:Set(true)
                            else
                                OrionLib:MakeNotification({Name = "Notify",Content = "Auto Heal Has Been Disabled",Image = "rbxassetid://7733658504",Time = 4})
                                Utilities["Auto Heal"]:Set(false)
                            end
                        elseif name == "Kill Aura" then
                            if KillAura == false then
                                OrionLib:MakeNotification({Name = "Notify",Content = "Kill Aura Has Been Enabled",Image = "rbxassetid://7733658504",Time = 4})
                                Utilities["Kill Aura"]:Set(true)
                            else
                                OrionLib:MakeNotification({Name = "Notify",Content = "Kill Aura Has Been Disabled",Image = "rbxassetid://7733658504",Time = 4})
                                Utilities["Kill Aura"]:Set(false)
                            end
                        elseif name == "Equip Armor" then
                            EquipArmor()
                        elseif name == "Self Hut" then
                            SelfHut()
                        elseif name == "Anti Lag" then
                            if AntiLag == false then
                                OrionLib:MakeNotification({Name = "Notify",Content = "Anti Lag Has Been Enabled",Image = "rbxassetid://7733658504",Time = 4})
                                Utilities["Anti Lag"]:Set(true)
                            else
                                OrionLib:MakeNotification({Name = "Notify",Content = "Anti Lag Has Been Disabled",Image = "rbxassetid://7733658504",Time = 4})
                                Utilities["Anti Lag"]:Set(false)
                            end
                        end
                    end

                    if TextButton.Name == "Button 1" then
                        TextButton.Text = "Auto Heal"
                    elseif TextButton.Name == "Button 2" then
                        TextButton.Text = "Kill Aura"
                    elseif TextButton.Name == "Button 3" then
                        TextButton.Text = "Equip Armor"
                    elseif TextButton.Name == "Button 4" then
                        TextButton.Text = "Self Hut"
                    elseif TextButton.Name == "Button 5" then
                        TextButton.Text = "Anti Lag"
                    end
                    TextButton.MouseButton1Click:Connect(function()
                        Clicked(TextButton.Text)
                    end)
                end
            end
        elseif CoreGui:FindFirstChild("Quick Toggles") then
            CoreGui:FindFirstChild("Quick Toggles"):Destroy()
        end
    end
})

Misc:AddToggle({
    Name = "Stream Spoofer",
    Default = false,
    Callback = function(Value)
        Settings.Misc.Spoof = Value

        task.spawn(LPH_NO_VIRTUALIZE(function()
            if Settings.Misc.Spoof then
                while Settings.Misc.Spoof do
                    if CheckTarget(LocalPlayer) then
                        LocalPlayer.PlayerGui.SecondaryGui.PlayerList.Visible = false
                        LocalPlayer.PlayerGui.Chat.Enabled = false
                        LocalPlayer.PlayerGui.MainGui.Panels.Target.Visible = false
                    end
                    task.wait()
                end
            else
                LocalPlayer.PlayerGui.SecondaryGui.PlayerList.Visible = true
                LocalPlayer.PlayerGui.Chat.Enabled = true
            end
        end))
    end
})

local Section = Misc:AddSection({
    Name = "Client Section"
})

Utilities["Slight Speed"] = Misc:AddToggle({
    Name = "Slight Speed",
    Default = false,
    Callback = function(Value)
        Settings.Misc.Slight = Value
        if Settings.Misc.Slight then
            task.spawn(function()
                if hookmetamethod then
                    local old
                    old = hookmetamethod(game, "__newindex", LPH_NO_VIRTUALIZE(function(self, key, value)
                        if Settings.Misc.Slight then
                            if self:IsA("Humanoid") and key == "WalkSpeed" then
                                return old(self, key, Settings.Misc.Speed)
                            end
                        end
                        return old(self, key, value)
                    end))
                else
                    OrionLib:MakeNotification({Name = "Notify",Content = "your exploit doesn't support this feature",Image = "rbxassetid://7733658504",Time = 8})
                end
            end)
        elseif restorefunction then
            restorefunction(getrawmetatable(game).__newindex)
        end
    end
})

Misc:AddSlider({
    Name = "Choose Speed",
    Min = 16,
    Max = 18,
    Default = 8,
    Color = Color3.fromRGB(166,0,255),
    Increment = 0.1,
    ValueName = "Speed",
    Callback = function(Value)
        Settings.Misc.Speed = Value
    end
})

Utilities["Jump Height"] = Misc:AddToggle({
    Name = "Jump Height",
    Default = false,
    Callback = function(Value)
        Settings.Misc.JumpHeight = Value

        if Settings.Misc.JumpHeight then
            task.spawn(function()
                LPH_NO_VIRTUALIZE(function()
                    while Settings.Misc.JumpHeight do
                        if CheckTarget(LocalPlayer) then
                            LocalPlayer.Character.Humanoid.UseJumpPower = false
                            LocalPlayer.Character.Humanoid.JumpHeight = Settings.Misc.Height
                        end
                        task.wait()
                    end
                end)()
            end)
        else
            LocalPlayer.Character.Humanoid.UseJumpPower = true
        end
    end
})

for i,v in next, getrenv().buffer do
    if i ~= "create" and i ~= 'copy' then
        local old; old = hookfunction(getrenv().buffer.writeu32, function(...)
            local args = {...}
            for x,c in next, args do
                warn(x,c)
            end
            return old(...)
        end)
    end
end

for i,v in next, getgc() do
    if typeof(v) == 'function' and islclosure(v) then
        local cons = debug.getconstants(v)
        if table.find(cons, "writeu32") and table.find(cons, 4) then
            for c, x in next, debug.getupvalues(v) do
                warn(c,x)
            end
            warn(debug.getinfo(v).name)
            local old; old = hookfunction(v, function(...)
                local args = {...}
                for ix, vn in next, args do
                    warn(ix, vn)
                end
                --warn(args[1])
                --warn(debug.getinfo(args[2]).name)
                --for c,x in next,  args[3] do
                   -- warn(c,x)
                --end
                return old(...)
            end)
        end
            --local func = debug.getupvalue(v, 2)
            --warn(debug.getinfo(v).currentline)
            --warn(debug.getinfo(func).name)
            --[[local old; old = hookfunction(v, function(...)
                local args = {...}
                for i,v in next, args do
                    warn(i,v)
                end
                --warn(args[1])
                --warn(debug.getinfo(args[2]).name)
                --for c,x in next,  args[3] do
                   -- warn(c,x)
                --end
                return old(...)
            end)]]--
       -- end
    end
end
local packets = require(game.ReplicatedStorage.Modules.Packets)
local oldSend = packets.SwingTool.send
packets.SwingTool.send = function(...)
    for i,v in next, ({...})[1] do
        warn(i,v)
    end
    return oldSend(...)
end


local function encodeBytes(number)
    local byte1 = bit32.extract(number, 8, 8)
    local byte2 = bit32.extract(number, 0, 8)
    local byte3 = bit32.extract(number, 16, 8)

    local byteString = "\r\1\0" .. string.char(byte2, byte1, byte3) .. "\0"

    return byteString
end


local localPlayer = game.Players.LocalPlayer
local resources = game.workspace.Resources
function resourcesaura()
    local playerps = localPlayer.Character.HumanoidRootPart.Position

    for _, v in ipairs(resources:GetChildren()) do
            local postion = v:GetPivot().Position
            local distance = (playerps - postion).Magnitude
            if distance < 15 then
                local resourceid = v:GetAttribute("EntityID")
                warn(resourceid)
                local args = {
                    [1] = buffer.fromstring(encodeBytes(resourceid))
                }


                game:GetService("ReplicatedStorage"):WaitForChild("ByteNetReliable"):FireServer(unpack(args))
            
        end
    end
end

while wait() do
resourcesaura()
end
--swing tool readu32
local buff = buffer.fromstring("\r\1\0zO\r\0")
warn(buffer.readu8(buff, 0))
local buff = buffer.create(4)
buffer.writeu8(buff, 0, 13)
buffer.writeu8(buff, 1, )
warn(buffer.readu8(buff, 0))

local function numberToByteString(n, byteCount)
    local byteString = ""
    for i = byteCount - 1, 0, -1 do
        local byte = bit32.extract(n, i * 8, 8) -- Extrae cada byte
        byteString = byteString .. "\\" .. byte
    end
    return byteString
end

local numero = 1100719
local resultado = numberToByteString(750, 4) -- Convertir a 4 bytes
print(resultado) -- Imprime algo como "\0\48\57"

local args = {
	buffer.fromstring("\r\1\0\\0")
}
game:GetService("ReplicatedStorage"):WaitForChild("ByteNetReliable"):FireServer(unpack(args))



setclipboard(tostring(workspace.Resources:GetChildren()[63]:GetAttribute("EntityID")))

local old; 
old = hookmetamethod(game, '__index', newcclosure(function(Self, index, ...)
    local Args = {...}
    local namecallMethod = getnamecallmethod()
    local callingScript = getcallingscript()

    if tostring(namecallMethod) == 'FireServer' then
        if callingScript and callingScript.Parent then
            warn("("..tostring(Self)..") ", "Path:["..callingScript:GetFullName().."]")
        else
            warn(tostring(Self)..", CALLINGSCRIPT:"..tostring(callingScript))
            warn('buffer result: ', buffer.readu32(Args[1]))
        end
        --for i,v in next, Args do            
           -- warn(" ["..i.."]: "..tostring(v))
        --end
    end
    
    return old(Self, index, ...)
end))


local function alloc(bytes: number)
	if not (cursor + bytes >= size) then
		return
	end

	size *= 2

	local newBuffer = bufferCreate(size)
	bufferCopy(newBuffer, 0, buff)

	buff = newBuffer
end

function writePacket(id, data)
	local makeBuffer = buffer.create(4)
	buffer.writeu8(makeBuffer, 0, data)
    warn(readmemory)
    --note
    --data ent id
    --id 12
end


for _, v in pairs(getgc(true)) do
    if type(v) == "table" and rawget(v, "buffer") then
        if not isreadonly(v) then
            local old; old = hookfunction(v.buffer.writeu32, function(...)
                local args = {...}
                for i,v in next, args do
                    warn(i,v)
                end
                --warn(args[1])
                --warn(debug.getinfo(args[2]).name)
                --for c,x in next,  args[3] do
                   -- warn(c,x)
                --end
                return old(...)
            end)
        end
    end
end



local ByteNetReliable = game.ReplicatedStorage:WaitForChild("ByteNetReliable")
local localPlayer = game.Players.LocalPlayer
local players = game.Players

function aurabypass()
    local playerps = localPlayer.Character.HumanoidRootPart.Position

    for _, v in ipairs(players:GetPlayers()) do
        if v ~= localPlayer and v.Character:FindFirstChild("Head") then
            local head = v.Character.Head
            local distance = (playerps - head.Position).Magnitude
            if distance < 9e9 then
                local plrid = v.Character:GetAttribute("EntityID") 
                local bufferResult = buffer.create(4)
                --buffer.writeu32(bufferResult, 0, plrid)
                buffer.writeu8(bufferResult, 0, 12)

                warn(buffer.readu8(bufferResult, 0))
               -- buffer.copy(bufferResult, 0, bufferResult, 0, 4)
                --warn(buffer.readu8(bufferResult, 0))
                ByteNetReliable:FireServer(bufferResult)
            end
        end
    end
end

--ByteNetReliable.OnClientEvent:Connect(function(aarg1)
    --warn(buffer.tostring(aarg1))
--end)

aurabypass()

Misc:AddSlider({
    Name = "Height",
    Min = 8,
    Max = 16,
    Default = 8,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Height",
    Callback = function(Value)
        Settings.Misc.Height = Value
    end
})

local Section = Skins:AddSection({
    Name = "Skins Section"
})

Skins:AddToggle({
    Name = "Skin Changer",
    Default = false,
    Callback = function(Value)
        Settings.Skins.Enabled = Value

        if Settings.Skins.Enabled then
            local Old
            task.spawn(LPH_NO_VIRTUALIZE(function()
                while Settings.Skins.Enabled do
                    if CheckTarget(LocalPlayer) then
                        for i,v in next, LocalPlayer.Character:GetChildren() do
                            if v.Name == "Tools" then
                                for i2 ,v2 in next, v:GetChildren() do
                                    local Result = v2:FindFirstChild("Part") or v2:FindFirstChild("Rod")
                                    if table.find(ToolNames, v2.Name) and Result then
                                        if not Utilities.SkinChanger then
                                            local FileMesh = Instance.new("FileMesh", Result)
                                            Utilities.SkinChanger = FileMesh
                                            Old = v2
                                        end
                                        Utilities.SkinChanger.MeshId = Settings.Skins.EnableC and Settings.Skins.Custom or Meshes[Settings.Skins.Choose]
                                        Utilities.SkinChanger.Scale = Vector3.new(Settings.Skins.Size,Settings.Skins.Size,Settings.Skins.Size)
                                    end
                                    if not Old.Parent then
                                        Old = nil
                                        Utilities.SkinChanger = nil
                                    end
                                end
                            end
                        end
                    else
                        Old = nil
                        Utilities.SkinChanger = nil
                    end
                    task.wait()
                end
            end))
        elseif Utilities.SkinChanger then
            Utilities.SkinChanger:Destroy()
            Utilities.SkinChanger = nil
        end 
    end
})

Skins:AddSlider({
    Name = "Choose Size",
    Min = 1,
    Max = 16,
    Default = 1,
    Color = Color3.fromRGB(166,0,255),
    Increment = 1,
    ValueName = "Size",
    Callback = function(Value)
        Settings.Skins.Size = Value
    end
})

Skins:AddDropdown({
    Name = "Choose Skin",
    Default = "Assault Rifle",
    Options = SkinsTable,
    Callback = function(Value)
        Settings.Skins.Choose = Value
    end
})

Skins:AddToggle({
    Name = "Enable Custom",
    Default = false,
    Callback = function(Value)
        Settings.Skins.EnableC = Value
    end
})

Skins:AddTextbox({
	Name = "Custom Skin",
	Default = "url of the skin",
	TextDisappear = false,
	Callback = function(Value)
        Settings.Skins.Custom = tostring(Value)
    end	  
})

local Section = Skins:AddSection({
    Name = "Accessory Section"
})

Skins:AddToggle({
    Name = "Accessory Changer",
    Default = false,
    Callback = function(Value)
        Settings.Skins.Accessory = Value

        if Settings.Skins.Accessory then
            task.spawn(LPH_NO_VIRTUALIZE(function()
                while Settings.Skins.Accessory do
                    if CheckTarget(LocalPlayer) then
                        for i,v in next, LocalPlayer.Character:GetChildren() do
                            if table.find(Settings.Skins.ObjectType, "Weapons") then
                                if v.Name == "Tools" then
                                    for i2, v2 in next, v:GetChildren() do
                                        local Result = v2:FindFirstChild("Part") or v2:FindFirstChild("Rod")
                                        if table.find(ToolNames, v2.Name) and Result then
                                            if not OldWeapon then
                                                OldWeapon = {Color = Result.Color, Material = Result.Material, Item = Result}
                                            end
                                            Result.Color = Settings.Skins.Color
                                            Result.Material = Settings.Skins.Material
                                        end
                                    end
                                end
                            elseif OldWeapon then
                                OldWeapon.Item.Color = OldWeapon.Color
                                OldWeapon.Item.Material = OldWeapon.Material
                                OldWeapon = nil
                            end
                            if table.find(Settings.Skins.ObjectType, "Bag") then
                                if v.Name:lower():find("bag") and v:IsA("Model") then
                                    for i2, v2 in next, v:GetChildren() do
                                        if v2:IsA("BasePart") then
                                            if not OldBag[v2] then
                                                OldBag[v2] = {Color = v2.Color, Material = v2.Material}
                                            end
                                            v2.Color = Settings.Skins.Color
                                            v2.Material = Settings.Skins.Material
                                        end
                                    end
                                end
                            elseif OldBag then
                                for i,v in next, OldBag do
                                    i.Color = v.Color
                                    i.Material = v.Material
                                    OldBag[i] = nil
                                end
                            end
                            if table.find(Settings.Skins.ObjectType, "Armor") then
                                if v.Name:lower():find("greaves") or v.Name:lower():find("legs") or v.Name:lower():find("halo") or v.Name:lower():find("chestplate") and v:IsA("Folder") then
                                    for i2, v2 in next, v:GetDescendants() do
                                        if v2:IsA("BasePart") and v2.Color and v2.Material then
                                            if not OldArmor[v2] then
                                                OldArmor[v2] = {Color = v2.Color, Material = v2.Material}
                                            end
                                            v2.Color = Settings.Skins.Color
                                            v2.Material = Settings.Skins.Material
                                        end
                                    end
                                elseif v:FindFirstChild("head") and v:FindFirstChild("Handle") then
                                    if not OldHelmet then
                                        OldHelmet = {Color = v.Handle.Color, Material = v.Handle.Material, Item = v.Handle}
                                    end
                                    v.Handle.Color = Settings.Skins.Color
                                    v.Handle.Material = Settings.Skins.Material
                                end
                            elseif OldArmor then
                                for i,v in next, OldArmor do
                                    i.Color = v.Color
                                    i.Material = v.Material
                                    OldArmor[i] = nil
                                end
                                if OldHelmet then
                                    OldHelmet.Item.Color = OldHelmet.Color
                                    OldHelmet.Item.Material = OldHelmet.Material
                                    OldHelmet = nil
                                end
                            end
                            if OldWeapon and not OldWeapon.Item.Parent then
                                OldWeapon = nil
                            end
                            if OldHelmet and not OldHelmet.Item.Parent then
                                OldHelmet = nil
                            end
                            for i,v in next, OldBag do
                                if not i.Parent then
                                    OldBag[i] = nil
                                end
                            end
                            for i,v in next, OldArmor do
                                if not i.Parent then
                                    OldArmor[i] = nil
                                end
                            end
                        end
                    else
                        OldHelmet = nil
                        OldWeapon = nil
                        for i,v in next, OldArmor do
                            OldArmor[i] = nil
                        end
                        for i,v in next, OldBag do
                            OldBag[i] = nil
                        end
                    end
                    task.wait()
                end
            end))
        else
            for i, v in next, OldBag do
                if i and i.Parent then
                    i.Color = v.Color
                    i.Material = v.Material
                    OldBag[i] = nil
                end
            end
            for i,v in next, OldArmor do
                if i and i.Parent then
                    i.Color = v.Color
                    i.Material = v.Material
                    OldArmor[i] = nil
                end
            end
            if OldHelmet then
                OldHelmet.Item.Color = OldHelmet.Color
                OldHelmet.Item.Material = OldHelmet.Material
                OldHelmet = nil
            end
            if OldWeapon then
                OldWeapon.Item.Color = OldWeapon.Color
                OldWeapon.Item.Material = OldWeapon.Material
                OldWeapon = nil
            end
        end 
    end
})

Skins:AddDropdown({
    Name = "Material Type",
    Default = "CrackedLava",
    Options = Materials,
    Callback = function(Value)
        Settings.Skins.Material = Value
    end
})

Skins:AddColorpicker({
    Name = 'Choose Color',
    Default = Color3.fromRGB(166,0,255),
    Callback = function(Value)
        Settings.Skins.Color = Value
    end
})

Skins:AddDropdown({
    Name = "Object Type",
    Default = "Weapons",
    Options = {"Bag", "Armor", "Weapons"},
    Multi = true,
    Callback = function(Value)
        Settings.Skins.ObjectType = Value
    end
})

-- [[ SCRIPT LOADED ]] --
local Time = string.format("%."..tostring(Decimals).."f", os.clock() - Clock)
OrionLib:MakeNotification({
    Name = "Notify",
    Content = "Script [Loaded] In - "..tostring(Time).."s",
    Image = "rbxassetid://7733715400",
    Time = 15
})

getgenv().syn = syn

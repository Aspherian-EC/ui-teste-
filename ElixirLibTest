local ElixirLib = {}
ElixirLib.__index = ElixirLib

-- Inicializa a UI principal
function ElixirLib:MakeWindow(info)
    info = info or {}
    local Window = {}

    local ScreenGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
    ScreenGui.Name = info.Name or "Elixir Client"

    -- Janela principal
    local Main = Instance.new("Frame", ScreenGui)
    Main.Size = UDim2.new(0, 520, 0, 360)
    Main.Position = UDim2.new(0.35, 0, 0.3, 0)
    Main.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
    Main.BorderSizePixel = 0

    -- Tabs scrollável (à esquerda)
    local TabList = Instance.new("ScrollingFrame", Main)
    TabList.Size = UDim2.new(0, 130, 1, -40)
    TabList.Position = UDim2.new(0, 0, 0, 40)
    TabList.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    TabList.ScrollBarThickness = 3
    TabList.AutomaticCanvasSize = Enum.AutomaticSize.Y

    local TabLayout = Instance.new("UIListLayout", TabList)
    TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabLayout.Padding = UDim.new(0, 5)

    -- Painel direito (onde toggles e sliders aparecerão)
    local ContentFrame = Instance.new("ScrollingFrame", Main)
    ContentFrame.Size = UDim2.new(1, -140, 1, -40)
    ContentFrame.Position = UDim2.new(0, 140, 0, 40)
    ContentFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    ContentFrame.ScrollBarThickness = 4
    ContentFrame.Visible = false -- só aparece quando uma tab é clicada
    ContentFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y

    local ContentLayout = Instance.new("UIListLayout", ContentFrame)
    ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ContentLayout.Padding = UDim.new(0, 8)

    -- Barra superior
    local Topbar = Instance.new("Frame", Main)
    Topbar.Size = UDim2.new(1, 0, 0, 34)
    Topbar.BackgroundColor3 = Color3.fromRGB(35, 35, 45)

    local Title = Instance.new("TextLabel", Topbar)
    Title.Size = UDim2.new(1, -10, 1, 0)
    Title.Position = UDim2.new(0, 10, 0, 0)
    Title.BackgroundTransparency = 1
    Title.TextColor3 = Color3.new(1, 1, 1)
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Font = Enum.Font.GothamBold
    Title.Text = info.Name or "Elixir Client"

    -- Adiciona Tabs
    function Window:MakeTab(tabInfo)
        local TabButton = Instance.new("TextButton", TabList)
        TabButton.Size = UDim2.new(1, -10, 0, 30)
        TabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
        TabButton.TextColor3 = Color3.new(1, 1, 1)
        TabButton.Font = Enum.Font.GothamBold
        TabButton.TextSize = 13
        TabButton.Text = tabInfo.Name or "Tab"

        local TabFrame = Instance.new("Frame", ContentFrame)
        TabFrame.Size = UDim2.new(1, 0, 0, 0)
        TabFrame.BackgroundTransparency = 1
        TabFrame.AutomaticSize = Enum.AutomaticSize.Y
        TabFrame.Visible = false

        local TabLayout = Instance.new("UIListLayout", TabFrame)
        TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
        TabLayout.Padding = UDim.new(0, 6)

        -- Clicar na Tab alterna a janela direita
        TabButton.MouseButton1Click:Connect(function()
            for _, v in pairs(ContentFrame:GetChildren()) do
                if v:IsA("Frame") then v.Visible = false end
            end
            ContentFrame.Visible = true
            TabFrame.Visible = true
        end)

        -- Sistema de toggles, sliders, etc
        function TabFrame:AddToggle(info)
            local Toggle = Instance.new("TextButton", TabFrame)
            Toggle.Size = UDim2.new(1, -10, 0, 30)
            Toggle.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
            Toggle.TextColor3 = Color3.new(1, 1, 1)
            Toggle.Text = info.Name or "Toggle"
            Toggle.Font = Enum.Font.GothamBold
            Toggle.TextSize = 12
            Toggle.AutoButtonColor = false

            local Enabled = false
            Toggle.MouseButton1Click:Connect(function()
                Enabled = not Enabled
                Toggle.BackgroundColor3 = Enabled and Color3.fromRGB(80, 201, 206) or Color3.fromRGB(40, 40, 50)
                if info.Callback then info.Callback(Enabled) end
            end)
        end

        return TabFrame
    end

    return Window
end

local TweenService = game:GetService("TweenService")

function ElixirLib:AddToggle(parent, info)
    info = info or {}
    local Title = info.Name or "Toggle"
    local Default = info.Default or false
    local Callback = info.Callback or function() end

    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Name = "Toggle"
    ToggleFrame.Size = UDim2.new(1, -10, 0, 32)
    ToggleFrame.BackgroundTransparency = 1
    ToggleFrame.Parent = parent

    local ToggleMain = Instance.new("Frame")
    ToggleMain.Name = "ToggleMain"
    ToggleMain.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    ToggleMain.Size = UDim2.new(0.96, 0, 0, 28)
    ToggleMain.AnchorPoint = Vector2.new(0.5, 0.5)
    ToggleMain.Position = UDim2.new(0.5, 0, 0.5, 0)
    ToggleMain.Parent = ToggleFrame

    local UICorner = Instance.new("UICorner", ToggleMain)
    UICorner.CornerRadius = UDim.new(0, 3)

    local UIStroke = Instance.new("UIStroke", ToggleMain)
    UIStroke.Color = Color3.fromRGB(45, 45, 55)

    local Label = Instance.new("TextLabel")
    Label.Name = "Label"
    Label.BackgroundTransparency = 1
    Label.Size = UDim2.new(1, -40, 1, 0)
    Label.Position = UDim2.new(0, 10, 0, 0)
    Label.Font = Enum.Font.GothamBold
    Label.Text = Title
    Label.TextColor3 = Color3.fromRGB(230, 230, 230)
    Label.TextSize = 12
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = ToggleMain

    local Button = Instance.new("TextButton")
    Button.BackgroundTransparency = 1
    Button.Size = UDim2.new(1, 0, 1, 0)
    Button.Text = ""
    Button.Parent = ToggleMain

    -- Outer circle
    local Outer = Instance.new("Frame")
    Outer.Name = "Outer"
    Outer.Size = UDim2.new(0, 26, 0, 12)
    Outer.AnchorPoint = Vector2.new(1, 0.5)
    Outer.Position = UDim2.new(1, -10, 0.5, 0)
    Outer.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
    Outer.Parent = ToggleMain

    local OuterCorner = Instance.new("UICorner", Outer)
    OuterCorner.CornerRadius = UDim.new(1, 0)

    local OuterStroke = Instance.new("UIStroke", Outer)
    OuterStroke.Color = Color3.fromRGB(60, 60, 70)

    -- Inner circle
    local Inner = Instance.new("Frame")
    Inner.Name = "Inner"
    Inner.Size = UDim2.new(0, 10, 0, 10)
    Inner.Position = UDim2.new(0, 1, 0.5, -5)
    Inner.BackgroundColor3 = Color3.fromRGB(80, 201, 206)
    Inner.Parent = Outer

    local InnerCorner = Instance.new("UICorner", Inner)
    InnerCorner.CornerRadius = UDim.new(1, 0)

    local function SetState(on)
        Default = on
        if on then
            TweenService:Create(Inner, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {Position = UDim2.new(1, -11, 0.5, -5)}):Play()
            TweenService:Create(Outer, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(60, 60, 70)}):Play()
        else
            TweenService:Create(Inner, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {Position = UDim2.new(0, 1, 0.5, -5)}):Play()
            TweenService:Create(Outer, TweenInfo.new(0.15, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(40, 40, 50)}):Play()
        end
        task.spawn(Callback, Default)
    end

    Button.MouseButton1Click:Connect(function()
        SetState(not Default)
    end)

    SetState(Default)
end


function ElixirLib:AddSlider(parent, info)
    info = info or {}
    local Title = info.Name or "Slider"
    local Min = info.Min or 0
    local Max = info.Max or 100
    local Default = info.Default or 50
    local Callback = info.Callback or function() end

    local SliderFrame = Instance.new("Frame")
    SliderFrame.Name = "Slider"
    SliderFrame.Size = UDim2.new(1, -10, 0, 40)
    SliderFrame.BackgroundTransparency = 1
    SliderFrame.Parent = parent

    local SliderMain = Instance.new("Frame")
    SliderMain.Name = "SliderMain"
    SliderMain.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    SliderMain.Size = UDim2.new(0.96, 0, 0, 36)
    SliderMain.AnchorPoint = Vector2.new(0.5, 0.5)
    SliderMain.Position = UDim2.new(0.5, 0, 0.5, 0)
    SliderMain.Parent = SliderFrame

    local UICorner = Instance.new("UICorner", SliderMain)
    UICorner.CornerRadius = UDim.new(0, 3)

    local UIStroke = Instance.new("UIStroke", SliderMain)
    UIStroke.Color = Color3.fromRGB(45, 45, 55)

    local Label = Instance.new("TextLabel")
    Label.Name = "Label"
    Label.BackgroundTransparency = 1
    Label.Size = UDim2.new(1, -50, 0, 16)
    Label.Position = UDim2.new(0, 10, 0, 2)
    Label.Font = Enum.Font.GothamBold
    Label.Text = Title
    Label.TextColor3 = Color3.fromRGB(230, 230, 230)
    Label.TextSize = 12
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = SliderMain

    local ValueLabel = Instance.new("TextLabel")
    ValueLabel.Name = "ValueLabel"
    ValueLabel.BackgroundTransparency = 1
    ValueLabel.Size = UDim2.new(0, 40, 0, 16)
    ValueLabel.Position = UDim2.new(1, -45, 0, 2)
    ValueLabel.Font = Enum.Font.GothamBold
    ValueLabel.Text = tostring(Default)
    ValueLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
    ValueLabel.TextSize = 12
    ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
    ValueLabel.Parent = SliderMain

    local Bar = Instance.new("Frame")
    Bar.Name = "Bar"
    Bar.Size = UDim2.new(0.9, 0, 0, 6)
    Bar.Position = UDim2.new(0.05, 0, 0, 24)
    Bar.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
    Bar.Parent = SliderMain
    local BarCorner = Instance.new("UICorner", Bar)
    BarCorner.CornerRadius = UDim.new(1, 0)

    local Fill = Instance.new("Frame")
    Fill.Name = "Fill"
    Fill.Size = UDim2.new((Default - Min) / (Max - Min), 0, 1, 0)
    Fill.BackgroundColor3 = Color3.fromRGB(80, 201, 206)
    Fill.Parent = Bar
    local FillCorner = Instance.new("UICorner", Fill)
    FillCorner.CornerRadius = UDim.new(1, 0)

    local Circle = Instance.new("Frame")
    Circle.Name = "Circle"
    Circle.Size = UDim2.new(0, 10, 0, 10)
    Circle.Position = UDim2.new((Default - Min) / (Max - Min), -5, 0.5, -5)
    Circle.BackgroundColor3 = Color3.fromRGB(80, 201, 206)
    Circle.Parent = Bar
    local CircleCorner = Instance.new("UICorner", Circle)
    CircleCorner.CornerRadius = UDim.new(1, 0)

    local Dragging = false

    local function SetValue(v)
        v = math.clamp(v, Min, Max)
        local percent = (v - Min) / (Max - Min)
        TweenService:Create(Fill, TweenInfo.new(0.1), {Size = UDim2.new(percent, 0, 1, 0)}):Play()
        TweenService:Create(Circle, TweenInfo.new(0.1), {Position = UDim2.new(percent, -5, 0.5, -5)}):Play()
        ValueLabel.Text = tostring(math.floor(v))
        task.spawn(Callback, v)
    end

    Bar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
            local mouse = game.Players.LocalPlayer:GetMouse()
            while Dragging do
                local relative = math.clamp((mouse.X - Bar.AbsolutePosition.X) / Bar.AbsoluteSize.X, 0, 1)
                local val = Min + (Max - Min) * relative
                SetValue(val)
                task.wait()
            end
        end
    end)

    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = false
        end
    end)

    SetValue(Default)
end

return ElixirLib

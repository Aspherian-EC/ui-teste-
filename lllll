local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

local ElixirLib = {}
ElixirLib.Configs = {}
ElixirLib.Folder = "ElixirClient" -- padrão

-- Função para carregar configuração
local function loadConfig(folder)
	local success, result = pcall(function()
		return isfile(folder..".json") and HttpService:JSONDecode(readfile(folder..".json")) or {}
	end)
	return success and result or {}
end

-- Função para salvar configuração
local function saveConfig(folder, data)
	if writefile then
		writefile(folder..".json", HttpService:JSONEncode(data))
	end
end

-- Criar Window
function ElixirLib:MakeWindow(options)
	local window = {}
	local name = options.Name or "Elixir UI"
	local hidePremium = options.HidePremium or false
	local saveConfig = options.SaveConfig or false
	local configFolder = options.ConfigFolder or "ElixirClient"

	ElixirLib.Folder = configFolder
	if saveConfig then
		ElixirLib.Configs = loadConfig(configFolder)
	end

	-- GUI base (aqui você pode colar sua UI com painéis e topbar que já tem)
	local screenGui = Instance.new("ScreenGui", PlayerGui)
	screenGui.Name = "ElixirUI"

	local mainFrame = Instance.new("Frame", screenGui)
	mainFrame.Name = "Main"
	mainFrame.Size = UDim2.new(0, 700, 0, 400)
	mainFrame.Position = UDim2.new(0.5, -350, 0.2, 0)
	mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)

	local leftPanel = Instance.new("Frame", mainFrame)
	leftPanel.Size = UDim2.new(0, 180, 1, 0)
	leftPanel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	leftPanel.Name = "LeftPanel"

	local rightPanel = Instance.new("Frame", mainFrame)
	rightPanel.Size = UDim2.new(1, -180, 1, 0)
	rightPanel.Position = UDim2.new(0, 180, 0, 0)
	rightPanel.BackgroundTransparency = 1
	rightPanel.Name = "RightPanel"

	-- Sistema de tabs
	function window:MakeTab(tabOptions)
		local tabName = tabOptions.Name or "Tab"
		local tabIcon = tabOptions.Icon or ""
		local premiumOnly = tabOptions.PremiumOnly or false

		local tabButton = Instance.new("TextButton")
		tabButton.Size = UDim2.new(1, -20, 0, 40)
		tabButton.Position = UDim2.new(0, 10, 0, 10 + (#leftPanel:GetChildren() - 1) * 45)
		tabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
		tabButton.Text = tabName
		tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		tabButton.Font = Enum.Font.GothamBold
		tabButton.TextSize = 16
		tabButton.Parent = leftPanel

		local tabFrame = Instance.new("Frame")
		tabFrame.Size = UDim2.new(1, 0, 1, 0)
		tabFrame.BackgroundTransparency = 0
		tabFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
		tabFrame.Visible = false
		tabFrame.Parent = rightPanel

		tabButton.MouseButton1Click:Connect(function()
			for _, child in pairs(rightPanel:GetChildren()) do
				child.Visible = false
			end
			tabFrame.Visible = true
		end)

		local tab = {
			Container = tabFrame,
			Name = tabName
		}

		function tab:AddToggle(name, default, callback)
			local toggle = Instance.new("TextButton")
			toggle.Size = UDim2.new(0, 200, 0, 30)
			toggle.Position = UDim2.new(0, 10, 0, 10 + (#tabFrame:GetChildren()) * 35)
			toggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
			toggle.Text = name .. ": " .. tostring(default)
			toggle.Parent = tabFrame

			local state = default
			toggle.MouseButton1Click:Connect(function()
				state = not state
				toggle.Text = name .. ": " .. tostring(state)
				if callback then callback(state) end

				if saveConfig then
					ElixirLib.Configs[tabName .. "_" .. name] = state
					saveConfig(configFolder, ElixirLib.Configs)
				end
			end)

			-- Carregar config
			if saveConfig and ElixirLib.Configs[tabName .. "_" .. name] ~= nil then
				state = ElixirLib.Configs[tabName .. "_" .. name]
				toggle.Text = name .. ": " .. tostring(state)
				if callback then callback(state) end
			end
		end

		return tab
	end

	return window
end

return ElixirLib
